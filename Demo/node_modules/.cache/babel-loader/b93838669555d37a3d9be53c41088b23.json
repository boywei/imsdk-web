{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/index.vue","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Notification2 from \"element-ui/lib/theme-chalk/notification.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Notification from \"element-ui/lib/notification\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport CurrentConversation from \"./components/conversation/current-conversation\";\nimport SideBar from \"./components/layout/side-bar\";\nimport Login from \"./components/user/login\";\nimport ImagePreviewer from \"./components/message/image-previewer.vue\";\nimport QrCodeList from \"./components/qr-code-list\";\nimport { translateGroupSystemNotice } from \"./utils/common\";\nimport GroupLive from \"./components/group-live/index\";\nimport Calling from \"./components/message/trtc-calling/calling-index\";\nimport { ACTION } from \"./utils/trtcCustomMessageMap\";\nexport default {\n  title: 'TIMSDK DEMO',\n  data: function data() {\n    return {\n      loginType: 2 // github 登录只使用默认账号登录\n\n    };\n  },\n  components: {\n    Login: Login,\n    SideBar: SideBar,\n    CurrentConversation: CurrentConversation,\n    ImagePreviewer: ImagePreviewer,\n    QrCodeList: QrCodeList,\n    GroupLive: GroupLive,\n    Calling: Calling\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    },\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    videoCall: function videoCall(state) {\n      return state.conversation.videoCall;\n    },\n    audioCall: function audioCall(state) {\n      return state.conversation.audioCall;\n    },\n    isLogin: function isLogin(state) {\n      return state.user.isLogin;\n    },\n    isSDKReady: function isSDKReady(state) {\n      return state.user.isSDKReady;\n    },\n    isBusy: function isBusy(state) {\n      return state.video.isBusy;\n    },\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    userSig: function userSig(state) {\n      return state.user.userSig;\n    },\n    sdkAppID: function sdkAppID(state) {\n      return state.user.sdkAppID;\n    }\n  })), {}, {\n    // 是否显示 Loading 状态\n    showLoading: function showLoading() {\n      return !this.isSDKReady;\n    }\n  }),\n  mounted: function mounted() {\n    // 初始化监听器\n    this.initListener();\n  },\n  watch: {},\n  methods: {\n    initListener: function initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this); // SDK NOT READT\n\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this); // 被踢出\n\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut); // SDK内部出错\n\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError); // 收到新消息\n\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage); // 会话列表更新\n\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList); // 群组列表更新\n\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList); // 网络监测\n\n      this.tim.on(this.TIM.EVENT.NET_STATE_CHANGE, this.onNetStateChange); // 已读回执\n\n      this.tim.on(this.TIM.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer); // 黑名单更新\n\n      this.tim.on(this.TIM.EVENT.FRIEND_LIST_UPDATED, this.onFriendListUpdated);\n      this.tim.on(this.TIM.EVENT.FRIEND_APPLICATION_LIST_UPDATED, this.onFriendApplicationListUpdated);\n      this.tim.on(this.TIM.EVENT.FRIEND_GROUP_LIST_UPDATED, this.onFriendGroupListUpdated);\n    },\n    onFriendApplicationListUpdated: function onFriendApplicationListUpdated(data) {\n      this.$store.commit('updateApplicationList', data.data.friendApplicationList);\n      this.$store.commit('updateUnreadCount', data.data.unreadCount);\n    },\n    onFriendListUpdated: function onFriendListUpdated(data) {\n      this.$store.commit('updateFriendList', data.data);\n    },\n    onFriendGroupListUpdated: function onFriendGroupListUpdated(data) {\n      this.$store.commit('updateFriendGroupList', data.data);\n    },\n    onReceiveMessage: function onReceiveMessage(_ref) {\n      var messageList = _ref.data;\n      this.handleVideoMessage(messageList);\n      this.handleQuitGroupTip(messageList);\n      this.handleCloseGroupLive(messageList);\n      this.$store.commit('pushCurrentMessageList', messageList);\n      this.$store.commit('pushAvChatRoomMessageList', messageList);\n    },\n    onError: function onError(_ref2) {\n      var data = _ref2.data;\n\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        });\n      }\n    },\n    onMessageReadByPeer: function onMessageReadByPeer() {},\n    onReadyStateUpdate: function onReadyStateUpdate(_ref3) {\n      var _this = this;\n\n      var name = _ref3.name;\n      var isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false;\n      this.$store.commit('toggleIsSDKReady', isSDKReady);\n\n      if (isSDKReady) {\n        this.tim.getMyProfile().then(function (_ref4) {\n          var data = _ref4.data;\n\n          _this.$store.commit('updateCurrentUserProfile', data);\n        }).catch(function (error) {\n          _this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          });\n        });\n        this.$store.dispatch('getBlacklist'); // 登录trtc calling\n\n        this.trtcCalling.login({\n          sdkAppID: this.sdkAppID,\n          userID: this.userID,\n          userSig: this.userSig\n        });\n      }\n    },\n    kickedOutReason: function kickedOutReason(type) {\n      switch (type) {\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\n          return '由于多实例登录';\n\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\n          return '由于多设备登录';\n\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\n          return '由于 userSig 过期';\n\n        default:\n          return '';\n      }\n    },\n    checkoutNetState: function checkoutNetState(state) {\n      switch (state) {\n        case this.TIM.TYPES.NET_STATE_CONNECTED:\n          return {\n            message: '已接入网络',\n            type: 'success'\n          };\n\n        case this.TIM.TYPES.NET_STATE_CONNECTING:\n          return {\n            message: '当前网络不稳定',\n            type: 'warning'\n          };\n\n        case this.TIM.TYPES.NET_STATE_DISCONNECTED:\n          return {\n            message: '当前网络不可用',\n            type: 'error'\n          };\n\n        default:\n          return '';\n      }\n    },\n    onNetStateChange: function onNetStateChange(event) {\n      this.$store.commit('showMessage', this.checkoutNetState(event.data.state));\n    },\n    onKickOut: function onKickOut(event) {\n      this.$store.commit('showMessage', {\n        message: \"\".concat(this.kickedOutReason(event.data.type), \"\\u88AB\\u8E22\\u51FA\\uFF0C\\u8BF7\\u91CD\\u65B0\\u767B\\u5F55\\u3002\"),\n        type: 'error'\n      });\n      this.$store.commit('toggleIsLogin', false);\n      this.$store.commit('reset');\n    },\n    onUpdateConversationList: function onUpdateConversationList(event) {\n      this.$store.commit('updateConversationList', event.data);\n    },\n    onUpdateGroupList: function onUpdateGroupList(event) {\n      this.$store.commit('updateGroupList', event.data);\n    },\n    onReceiveGroupSystemNotice: function onReceiveGroupSystemNotice(event) {\n      var _this2 = this;\n\n      var isKickedout = event.data.type === 4;\n      var isCurrentConversation = \"GROUP\".concat(event.data.message.payload.groupProfile.groupID) === this.currentConversation.conversationID; // 在当前会话被踢，需reset当前会话\n\n      if (isKickedout && isCurrentConversation) {\n        this.$store.commit('resetCurrentConversation');\n      }\n\n      _Notification({\n        title: '新系统通知',\n        message: translateGroupSystemNotice(event.data.message),\n        duration: 3000,\n        onClick: function onClick() {\n          var SystemConversationID = '@TIM#SYSTEM';\n\n          _this2.$store.dispatch('checkoutConversation', SystemConversationID);\n        }\n      });\n    },\n    selectConversation: function selectConversation(conversationID) {\n      if (conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', conversationID);\n      }\n    },\n    isJsonStr: function isJsonStr(str) {\n      try {\n        JSON.parse(str);\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    },\n    handleVideoMessage: function handleVideoMessage(messageList) {\n      var _this3 = this;\n\n      var videoMessageList = messageList.filter(function (message) {\n        return message.type === _this3.TIM.TYPES.MSG_CUSTOM && _this3.isJsonStr(message.payload.data);\n      });\n      if (videoMessageList.length === 0) return;\n      var videoPayload = JSON.parse(videoMessageList[0].payload.data);\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\n        if (this.isBusy) {\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0]);\n          return;\n        }\n\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id);\n        this.selectConversation(videoMessageList[0].conversationID); // 切换当前会话页\n\n        if (videoMessageList[0].from !== this.userID) {\n          this.$bus.$emit('isCalled');\n        }\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\n        this.$bus.$emit('missCall');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\n        this.$bus.$emit('isRefused');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\n        this.$bus.$emit('missCall');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\n        this.$bus.$emit('isAccept');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\n        this.$bus.$emit('isHungUp');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\n        this.$bus.$emit('isRefused');\n      }\n\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\n        this.$bus.$emit('isRefused');\n      }\n    },\n\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe: function notifyMe(message) {\n      var _this4 = this;\n\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return;\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message);\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(function (permission) {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            _this4.handleNotify(message);\n          }\n        });\n      }\n    },\n    handleNotify: function handleNotify(message) {\n      var _this5 = this;\n\n      var notification = new window.Notification('有人提到了你', {\n        icon: 'https://web.sdk.qcloud.com/im/assets/images/logo.png',\n        body: message.payload.text\n      });\n\n      notification.onclick = function () {\n        window.focus();\n\n        _this5.$store.dispatch('checkoutConversation', message.conversationID);\n\n        notification.close();\n      };\n    },\n\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip: function handleQuitGroupTip(messageList) {\n      var _this6 = this;\n\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      var groupTips = messageList.filter(function (message) {\n        return _this6.currentConversation.conversationID === message.conversationID && message.type === _this6.TIM.TYPES.MSG_GRP_TIP && (message.payload.operationType === _this6.TIM.TYPES.GRP_TIP_MBR_QUIT || message.payload.operationType === _this6.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT);\n      }); // 清理当前会话的群成员列表\n\n      if (groupTips.length > 0) {\n        groupTips.forEach(function (groupTip) {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            _this6.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList);\n          }\n        });\n      }\n    },\n\n    /**\n     * 收到结束直播自定义消息，派发事件关闭组件\n     * @param {Message[]} messageList\n     */\n    handleCloseGroupLive: function handleCloseGroupLive(messageList) {\n      var _this7 = this;\n\n      messageList.forEach(function (message) {\n        if (_this7.currentConversation.conversationID === message.conversationID && message.type === _this7.TIM.TYPES.MSG_CUSTOM) {\n          var data = {};\n\n          try {\n            data = JSON.parse(message.payload.data);\n          } catch (e) {\n            data = {};\n          }\n\n          if (data.roomId && Number(data.roomStatus) === 0) {\n            _this7.$bus.$emit('close-group-live');\n          }\n        }\n      });\n    }\n  }\n};",{"version":3,"mappings":"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ACA;AACA;;AACA;AACA;AACA;AACA,KArMA;;AAsMA;AACA;AACA;AACA;AACAC,YA1MA,oBA0MAzB,OA1MA,EA0MA;AAAA;;AACA;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA,OAFA,MAEA;AACA0B;AACA;AACA;AACA;AACA;AACA,SALA;AAMA;AACA,KAxNA;AAyNAC,gBAzNA,wBAyNA3B,OAzNA,EAyNA;AAAA;;AACA;AACA4B,oEADA;AAEAC;AAFA;;AAIAC;AACAJ;;AACA;;AACAI;AACA,OAJA;AAKA,KAnOA;;AAoOA;AACA;AACA;AACA;AACAC,sBAxOA,8BAwOAP,WAxOA,EAwOA;AAAA;;AACA;AACA;AACA,uFACAxB,6CADA,KAEAA,uEACAA,yEAHA;AAIA,OALA,EAFA,CAQA;;AACA;AACAgC;AACA;AACA;AACA;AACA,SAJA;AAKA;AACA,KAxPA;;AAyPA;AACA;AACA;AACA;AACAC,wBA7PA,gCA6PAT,WA7PA,EA6PA;AAAA;;AACAA;AACA;AACA;;AACA;AACAxD;AACA,WAFA,CAEA;AACAA;AACA;;AACA;AACA;AACA;AACA;AACA,OAZA;AAaA;AA3QA;AA5CA","names":["title","data","loginType","components","Login","SideBar","CurrentConversation","ImagePreviewer","QrCodeList","GroupLive","Calling","computed","mapState","currentUserProfile","currentConversation","videoCall","audioCall","isLogin","isSDKReady","isBusy","userID","userSig","sdkAppID","showLoading","mounted","watch","methods","initListener","onFriendApplicationListUpdated","onFriendListUpdated","onFriendGroupListUpdated","onReceiveMessage","onError","message","type","onMessageReadByPeer","onReadyStateUpdate","getMyProfile","then","catch","kickedOutReason","checkoutNetState","state","onNetStateChange","event","onKickOut","onUpdateConversationList","onUpdateGroupList","onReceiveGroupSystemNotice","duration","onClick","selectConversation","conversationID","isJsonStr","str","JSON","handleVideoMessage","messageList","notifyMe","window","handleNotify","icon","body","notification","handleQuitGroupTip","groupTips","handleCloseGroupLive"],"sourceRoot":"src","sources":["index.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div id=\"wrapper\" v-if=\"!isLogin\" >\n      <login />\n      <qr-code-list/>\n    </div>\n    <div\n      class=\"loading\"\n      v-else\n      v-loading=\"showLoading\"\n      element-loading-text=\"正在拼命初始化...\"\n      element-loading-background=\"rgba(0, 0, 0, 0.8)\"\n    >\n      <div class=\"chat-wrapper\">\n        <el-row>\n          <el-col :xs=\"10\" :sm=\"10\" :md=\"8\" :lg=\"8\" :xl=\"7\">\n            <side-bar />\n          </el-col>\n          <el-col :xs=\"14\" :sm=\"14\" :md=\"16\" :lg=\"16\" :xl=\"17\">\n            <current-conversation />\n          </el-col>\n        </el-row>\n        <a\n          class=\"official-link\"\n          href=\"https://cloud.tencent.com/product/im\"\n          target=\"_blank\"\n        >登录 即时通信IM 官网，了解更多体验方式</a>\n      </div>\n      <calling  ref=\"callLayer\" class=\"chat-wrapper\"/>\n      <image-previewer />\n      <group-live />\n    </div>\n    <div class=\"bg\"></div>\n  </div>\n</template>\n\n<script>\nimport { Notification } from 'element-ui'\nimport { mapState } from 'vuex'\nimport CurrentConversation from './components/conversation/current-conversation'\nimport SideBar from './components/layout/side-bar'\nimport Login from './components/user/login'\nimport ImagePreviewer from './components/message/image-previewer.vue'\nimport QrCodeList from './components/qr-code-list'\nimport { translateGroupSystemNotice } from './utils/common'\nimport GroupLive from './components/group-live/index'\nimport Calling from './components/message/trtc-calling/calling-index'\nimport { ACTION } from './utils/trtcCustomMessageMap'\n\nexport default {\n  title: 'TIMSDK DEMO',\n  data () {\n    return {\n      loginType: 2 // github 登录只使用默认账号登录\n    }\n  },\n  components: {\n    Login,\n    SideBar,\n    CurrentConversation,\n    ImagePreviewer,\n    QrCodeList,\n    GroupLive,\n    Calling,\n  },\n\n  computed: {\n    ...mapState({\n      currentUserProfile: state => state.user.currentUserProfile,\n      currentConversation: state => state.conversation.currentConversation,\n      videoCall: state => state.conversation.videoCall,\n      audioCall: state => state.conversation.audioCall,\n      isLogin: state => state.user.isLogin,\n      isSDKReady: state => state.user.isSDKReady,\n      isBusy: state => state.video.isBusy,\n      userID: state => state.user.userID,\n      userSig: state => state.user.userSig,\n      sdkAppID: state => state.user.sdkAppID\n    }),\n    // 是否显示 Loading 状态\n    showLoading() {\n      return !this.isSDKReady\n    }\n  },\n  mounted() {\n    // 初始化监听器\n    this.initListener()\n\n  },\n\n  watch: {\n  },\n\n  methods: {\n    initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\n      // SDK NOT READT\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\n      // 被踢出\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, this.onKickOut)\n      // SDK内部出错\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\n      // 收到新消息\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\n      // 会话列表更新\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, this.onUpdateConversationList)\n      // 群组列表更新\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, this.onUpdateGroupList)\n      // 网络监测\n      this.tim.on(this.TIM.EVENT.NET_STATE_CHANGE, this.onNetStateChange)\n      // 已读回执\n      this.tim.on(this.TIM.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer)\n      // 黑名单更新\n      this.tim.on(this.TIM.EVENT.FRIEND_LIST_UPDATED, this.onFriendListUpdated)\n\n      this.tim.on(this.TIM.EVENT.FRIEND_APPLICATION_LIST_UPDATED, this.onFriendApplicationListUpdated)\n\n      this.tim.on(this.TIM.EVENT.FRIEND_GROUP_LIST_UPDATED, this.onFriendGroupListUpdated)\n\n    },\n    onFriendApplicationListUpdated(data) {\n      this.$store.commit('updateApplicationList', data.data.friendApplicationList)\n      this.$store.commit('updateUnreadCount', data.data.unreadCount)\n    },\n    onFriendListUpdated(data) {\n      this.$store.commit('updateFriendList', data.data)\n    },\n    onFriendGroupListUpdated(data) {\n      this.$store.commit('updateFriendGroupList', data.data)\n    },\n\n    onReceiveMessage({ data: messageList }) {\n      this.handleVideoMessage(messageList)\n      this.handleQuitGroupTip(messageList)\n      this.handleCloseGroupLive(messageList)\n      this.$store.commit('pushCurrentMessageList', messageList)\n      this.$store.commit('pushAvChatRoomMessageList', messageList)\n    },\n\n    onError({ data }) {\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        })\n      }\n    },\n    onMessageReadByPeer() {\n\n    },\n    onReadyStateUpdate({ name }) {\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\n\n      if (isSDKReady) {\n        this.tim\n          .getMyProfile()\n          .then(({ data }) => {\n            this.$store.commit('updateCurrentUserProfile', data)\n          })\n          .catch(error => {\n            this.$store.commit('showMessage', {\n              type: 'error',\n              message: error.message\n            })\n          })\n        this.$store.dispatch('getBlacklist')\n        // 登录trtc calling\n        this.trtcCalling.login({\n          sdkAppID: this.sdkAppID,\n          userID: this.userID,\n          userSig:this.userSig\n        })\n      }\n    },\n    kickedOutReason(type) {\n      switch (type) {\n        case this.TIM.TYPES.KICKED_OUT_MULT_ACCOUNT:\n          return '由于多实例登录'\n        case this.TIM.TYPES.KICKED_OUT_MULT_DEVICE:\n          return '由于多设备登录'\n        case this.TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED:\n          return '由于 userSig 过期'\n        default:\n          return ''\n      }\n    },\n    checkoutNetState(state) {\n      switch (state) {\n        case this.TIM.TYPES.NET_STATE_CONNECTED:\n          return { message: '已接入网络', type: 'success' }\n        case this.TIM.TYPES.NET_STATE_CONNECTING:\n          return { message: '当前网络不稳定', type: 'warning' }\n        case this.TIM.TYPES.NET_STATE_DISCONNECTED:\n          return { message: '当前网络不可用', type: 'error' }\n        default:\n          return ''\n      }\n    },\n    onNetStateChange(event) {\n      this.$store.commit('showMessage', this.checkoutNetState(event.data.state))\n    },\n\n    onKickOut(event) {\n      this.$store.commit('showMessage', {\n        message: `${this.kickedOutReason(event.data.type)}被踢出，请重新登录。`,\n        type: 'error'\n      })\n      this.$store.commit('toggleIsLogin', false)\n      this.$store.commit('reset')\n    },\n    onUpdateConversationList(event) {\n      this.$store.commit('updateConversationList', event.data)\n    },\n\n    onUpdateGroupList(event) {\n      this.$store.commit('updateGroupList', event.data)\n    },\n    onReceiveGroupSystemNotice(event) {\n      const isKickedout = event.data.type === 4\n      const isCurrentConversation =\n        `GROUP${event.data.message.payload.groupProfile.groupID}` ===\n        this.currentConversation.conversationID\n      // 在当前会话被踢，需reset当前会话\n      if (isKickedout && isCurrentConversation) {\n        this.$store.commit('resetCurrentConversation')\n      }\n      Notification({\n        title: '新系统通知',\n        message: translateGroupSystemNotice(event.data.message),\n        duration: 3000,\n        onClick: () => {\n          const SystemConversationID = '@TIM#SYSTEM'\n          this.$store.dispatch('checkoutConversation', SystemConversationID)\n        }\n      })\n    },\n\n    selectConversation(conversationID) {\n      if (conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation',conversationID)\n      }\n    },\n    isJsonStr(str) {\n      try{\n        JSON.parse(str)\n        return true\n      }catch {\n        return false\n      }\n    },\n    handleVideoMessage(messageList) {\n      const videoMessageList = messageList.filter(\n        message => message.type === this.TIM.TYPES.MSG_CUSTOM && this.isJsonStr(message.payload.data)\n      )\n      if (videoMessageList.length === 0) return\n      const videoPayload = JSON.parse(videoMessageList[0].payload.data)\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_DIALING) {\n        if (this.isBusy) {\n          this.$bus.$emit('busy', videoPayload, videoMessageList[0])\n          return\n        }\n        this.$store.commit('GENERATE_VIDEO_ROOM', videoPayload.room_id)\n        this.selectConversation(videoMessageList[0].conversationID) // 切换当前会话页\n        if (videoMessageList[0].from !== this.userID) {\n          this.$bus.$emit('isCalled')\n        }\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_CANCEL) {\n        this.$bus.$emit('missCall')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_REJECT) {\n        this.$bus.$emit('isRefused')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_SPONSOR_TIMEOUT) {\n        this.$bus.$emit('missCall')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ACCEPTED) {\n        this.$bus.$emit('isAccept')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_HANGUP) {\n        this.$bus.$emit('isHungUp')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_LINE_BUSY) {\n        this.$bus.$emit('isRefused')\n      }\n      if (videoPayload.action === ACTION.VIDEO_CALL_ACTION_ERROR) {\n        this.$bus.$emit('isRefused')\n      }\n    },\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe(message) {\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message)\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(permission => {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            this.handleNotify(message)\n          }\n        })\n      }\n    },\n    handleNotify(message) {\n      const notification = new window.Notification('有人提到了你', {\n        icon: 'https://web.sdk.qcloud.com/im/assets/images/logo.png',\n        body: message.payload.text\n      })\n      notification.onclick = () => {\n        window.focus()\n        this.$store.dispatch('checkoutConversation', message.conversationID)\n        notification.close()\n      }\n    },\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip(messageList) {\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      const groupTips = messageList.filter(message => {\n        return this.currentConversation.conversationID === message.conversationID &&\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT ||\n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT)\n      })\n      // 清理当前会话的群成员列表\n      if (groupTips.length > 0) {\n        groupTips.forEach(groupTip => {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\n          }\n        })\n      }\n    },\n    /**\n     * 收到结束直播自定义消息，派发事件关闭组件\n     * @param {Message[]} messageList\n     */\n    handleCloseGroupLive(messageList) {\n      messageList.forEach(message => {\n        if (this.currentConversation.conversationID === message.conversationID && message.type === this.TIM.TYPES.MSG_CUSTOM) {\n          let data = {}\n          try {\n            data = JSON.parse(message.payload.data)\n          } catch(e) {\n            data = {}\n          }\n          if (data.roomId && Number(data.roomStatus) === 0) {\n            this.$bus.$emit('close-group-live')\n          }\n        }\n      })\n    },\n  }\n}\n</script>\n\n<style lang=\"stylus\">\nbody {\n  overflow: hidden;\n  margin: 0;\n  font-family: 'Microsoft YaHei', '微软雅黑', 'MicrosoftJhengHei', 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'STHeiti', 'WenQuanYi Micro Hei', SimSun, sans-serif;\n  // font-family  \"Helvetica Neue\", Helvetica, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\", sans-serif\n  // text-shadow: $regular 0 0 0.05em\n  background-color: $bg;\n  -ms-scroll-chaining: chained;\n  -ms-overflow-style: none;\n  -ms-content-zooming: zoom;\n  -ms-scroll-rails: none;\n  -ms-content-zoom-limit-min: 100%;\n  -ms-content-zoom-limit-max: 500%;\n  -ms-scroll-snap-type: proximity;\n  -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n  -ms-overflow-style: none;\n  overflow: auto;\n\n  div {\n    box-sizing: border-box;\n\n    &::before, &::after {\n      box-sizing: border-box;\n    }\n  }\n}\n\n#wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding-top: 60px;\n}\n\n.container\n  position relative\n  height 100vh\n.container\n  position relative\n  height 100vh\n// TODO filter mac chrome 会有问题，下次修改可以去掉\n.bg {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  background: url('~@/./assets/image/bg.jpg') no-repeat 0 0;\n  background-size: cover;\n  // filter blur(67px)\n}\n\n.loading {\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n}\n\n.text-ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.chat-wrapper {\n  margin-top: 8vh;\n  width: $width;\n  height: $height;\n  max-width: 1280px;\n  box-shadow: 0 11px 20px 0 rgba(0, 0, 0, 0.3);\n\n  .official-link {\n    display: flex;\n    text-decoration: none;\n    color: #38c9ff;\n    width: fit-content;\n    float: right;\n    height: 45px;\n    align-items: center;\n  }\n}\n\n/* 设置滚动条的样式 */\n::-webkit-scrollbar {\n  width: 3px;\n  height: 3px;\n}\n\n/* 滚动槽 */\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n/* 滚动条滑块 */\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  background: rgba(0, 0, 0, 0.1);\n}\n/deep/ .el-popover {\n  width 800px\n  position fixed\n  left 0\n  right 0\n  margin auto\n}\n</style>\n"]}]}