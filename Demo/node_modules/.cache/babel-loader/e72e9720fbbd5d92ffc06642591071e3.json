{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/message/message-group-live-status.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/message/message-group-live-status.vue","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _defineProperty from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nexport default {\n  name: 'MessageGroupLiveStatus',\n  props: {\n    liveInfo: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    userID: function userID(state) {\n      return state.user.userID;\n    }\n  })), {}, {\n    cardTitle: function cardTitle() {\n      return \"\".concat(this.liveInfo.anchorName || this.liveInfo.anchorId, \"\\u7684\\u76F4\\u64AD\");\n    },\n    cardContent: function cardContent() {\n      return Number(this.liveInfo.roomStatus) === 1 ? '正在直播' : '结束直播';\n    },\n    roomCover: function roomCover() {\n      return this.liveInfo.roomCover || 'https://imgcache.qq.com/open/qcloud/video/act/webim-avatar/avatar-2.png';\n    }\n  }),\n  methods: {\n    handleClick: function () {\n      var _handleClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var isExisting, _this$liveInfo, roomID, anchorID, roomName;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.checkRoomExist();\n\n              case 2:\n                isExisting = _context.sent;\n                _this$liveInfo = this.liveInfo, roomID = _this$liveInfo.roomId, anchorID = _this$liveInfo.anchorId, roomName = _this$liveInfo.roomName;\n\n                if (isExisting) {\n                  _context.next = 7;\n                  break;\n                }\n\n                this.$store.commit('showMessage', {\n                  message: '直播已结束',\n                  type: 'info'\n                });\n                return _context.abrupt(\"return\");\n\n              case 7:\n                if (!(anchorID === this.userID)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this.$store.commit('showMessage', {\n                  message: '您正在其它终端或者Web实例上开播，请勿重复开播！',\n                  type: 'info'\n                });\n                return _context.abrupt(\"return\");\n\n              case 10:\n                this.$store.commit('updateGroupLiveInfo', {\n                  groupID: this.toAccount,\n                  roomID: roomID,\n                  anchorID: anchorID,\n                  roomName: roomName\n                });\n                this.$bus.$emit('open-group-live', {\n                  channel: 3\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleClick() {\n        return _handleClick.apply(this, arguments);\n      }\n\n      return handleClick;\n    }(),\n    // 检查房间是否存在\n    checkRoomExist: function () {\n      var _checkRoomExist = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var checkRes, list, roomIDList;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios('https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=getRoomList&appId=1400187352&type=groupLive');\n\n              case 2:\n                checkRes = _context2.sent;\n                list = checkRes.data && checkRes.data.data || [];\n                roomIDList = [];\n                list.forEach(function (item) {\n                  roomIDList.push(item.roomId);\n                });\n                return _context2.abrupt(\"return\", roomIDList.includes(this.liveInfo.roomId));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkRoomExist() {\n        return _checkRoomExist.apply(this, arguments);\n      }\n\n      return checkRoomExist;\n    }()\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AACAA,gCADA;AAEAC;AACAC;AACAC,kBADA;AAEAC;AAFA;AADA,GAFA;AAQAC,4CACAC;AACAC;AAAA;AAAA;AADA,IADA;AAIAC,aAJA,uBAIA;AACA;AACA,KANA;AAOAC,eAPA,yBAOA;AACA;AACA,KATA;AAUAC,aAVA,uBAUA;AACA;AACA;AAZA,IARA;AAsBAC;AACAC,eADA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,qBAFA;;AAAA;AAEAC,0BAFA;AAAA,iCAGA,aAHA,EAGAC,MAHA,kBAGAC,MAHA,EAGAC,QAHA,kBAGAC,QAHA,EAGAC,QAHA,kBAGAA,QAHA;;AAAA,oBAIAL,UAJA;AAAA;AAAA;AAAA;;AAKA;AACAM,kCADA;AAEAhB;AAFA;AALA;;AAAA;AAAA,sBAYAa,wBAZA;AAAA;AAAA;AAAA;;AAaA;AACAG,sDADA;AAEAhB;AAFA;AAbA;;AAAA;AAmBA;AACAiB,yCADA;AAEAN,gCAFA;AAGAE,oCAHA;AAIAE;AAJA;AAMA;AAAAG;AAAA;;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2BA;AACAC,kBA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA6BAC,sIA7BA;;AAAA;AA6BAC,wBA7BA;AA8BAC,oBA9BA,GA8BAD,yCA9BA;AA+BAE,0BA/BA,GA+BA,EA/BA;AAgCAD;AACAC;AACA,iBAFA;AAhCA,kDAmCAA,yCAnCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtBA","names":["name","props","liveInfo","type","required","computed","mapState","userID","cardTitle","cardContent","roomCover","methods","handleClick","isExisting","roomID","roomId","anchorID","anchorId","roomName","message","groupID","channel","checkRoomExist","axios","checkRes","list","roomIDList"],"sourceRoot":"src/components/message","sources":["message-group-live-status.vue"],"sourcesContent":["<template>\n  <div class=\"group-live-custom-message-card\" @click=\"handleClick\">\n    <p class=\"card-title\">{{cardTitle}}</p>\n    <p class=\"card-content\">{{cardContent}}</p>\n    <div class=\"card-footer\">\n      <img class=\"avatar\" :src=\"roomCover\" alt=\"\">\n      <span>群直播</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport axios from 'axios'\nexport default {\n  name: 'MessageGroupLiveStatus',\n  props: {\n    liveInfo: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    ...mapState({\n      userID: state => state.user.userID\n    }),\n    cardTitle() {\n      return `${this.liveInfo.anchorName || this.liveInfo.anchorId}的直播`\n    },\n    cardContent() {\n      return Number(this.liveInfo.roomStatus) === 1 ? '正在直播' : '结束直播'\n    },\n    roomCover() {\n      return this.liveInfo.roomCover || 'https://imgcache.qq.com/open/qcloud/video/act/webim-avatar/avatar-2.png'\n    }\n  },\n  methods: {\n    async handleClick() {\n      const isExisting = await this.checkRoomExist()\n      const { roomId: roomID, anchorId: anchorID, roomName } = this.liveInfo\n      if (!isExisting) {\n        this.$store.commit('showMessage', {\n          message: '直播已结束',\n          type: 'info'\n        })\n        return\n      }\n      // 主播多实例登录时，点击卡片直接返回\n      if (anchorID === this.userID) {\n        this.$store.commit('showMessage', {\n          message: '您正在其它终端或者Web实例上开播，请勿重复开播！',\n          type: 'info'\n        })\n        return\n      }\n      this.$store.commit('updateGroupLiveInfo', {\n        groupID: this.toAccount,\n        roomID: roomID,\n        anchorID: anchorID,\n        roomName: roomName,\n      })\n      this.$bus.$emit('open-group-live',  { channel: 3 })\n    },\n    // 检查房间是否存在\n    async checkRoomExist() {\n      const checkRes = await axios ('https://service-c2zjvuxa-1252463788.gz.apigw.tencentcs.com/release/forTest?method=getRoomList&appId=1400187352&type=groupLive')\n      const list = (checkRes.data && checkRes.data.data) || []\n      const roomIDList = []\n      list.forEach(item => {\n        roomIDList.push(item.roomId)\n      })\n      return roomIDList.includes(this.liveInfo.roomId) \n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.group-live-custom-message-card {\n  min-width: 160px;\n  max-width: 220px;\n  height 100px;\n  padding: 10px;\n  background-color: #fff;\n  color: #000;\n  cursor: pointer;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  // white-space: nowrap;\n\n  .card-title {\n    font-weight: 500;\n    margin: 0;\n  }\n  .card-content {\n    margin-bottom: 5px;\n    font-weight: 400;\n    border-bottom: 1px solid #e6e6e6;\n  }\n  .card-footer {\n    display: flex;\n    align-items: center;\n    color: #8e8b8b;\n    font-weight: 400;\n    font-size: 13px;\n    .avatar {\n      width: 28px;\n      height: 28px;\n      border-radius: 50%;\n      margin-right: 5px;\n    }\n  }\n}\n</style>\n"]}]}