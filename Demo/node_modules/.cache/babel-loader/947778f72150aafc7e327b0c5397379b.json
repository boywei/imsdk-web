{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/eslint-loader/index.js??ref--13-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/store/modules/groupLive.js","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/store/modules/groupLive.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _toConsumableArray from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar groupLiveModules = {\n  state: {\n    groupLiveInfo: {\n      groupID: 0,\n      // 群内直播时为当前群的ID,群组外直播时groupID设置为0\n      roomID: 0,\n      // 直播间ID,直播间内的直播群ID与roomID相同\n      anchorID: 0,\n      // 主播ID\n      roomName: '',\n      // 直播间名称\n      isNeededQuitRoom: 0 // 是否需要主动退出直播间 0 默认 1 主动退出\n\n    },\n    avChatRoomMessageList: [],\n    // 群直播中直播群消息列表\n    avChatRoomGiftMessageList: [],\n    // 群直播中直播群礼物消息列表\n    avChatRoomBarrageMessageList: [] // 群直播中直播群弹幕消息列表\n\n  },\n  getters: {},\n  mutations: {\n    /**\n     * 更新群直播信息\n     * @param {Object} state\n     * @param {Object} payload\n     */\n    updateGroupLiveInfo: function updateGroupLiveInfo(state, payload) {\n      state.groupLiveInfo = _objectSpread(_objectSpread({}, state.groupLiveInfo), payload);\n    },\n\n    /**\n     * 重置群直播信息\n     * @param {Object} state\n     * @param {Object} payload\n     */\n    resetGroupLiveInfo: function resetGroupLiveInfo(state, payload) {\n      state.groupLiveInfo = _objectSpread(_objectSpread({}, state.groupLiveInfo), payload);\n    },\n\n    /**\n     * 清除群直播消息列表\n     * @param {Object} state\n     * @param {Object} payload\n     */\n    clearAvChatRoomMessageList: function clearAvChatRoomMessageList(state) {\n      state.avChatRoomMessageList = [];\n      state.avChatRoomBarrageMessageList = [];\n      state.avChatRoomGiftMessageList = [];\n    },\n\n    /**\n     * 将群直播内的直播群消息push进列表\n     * @param {Object} state\n     * @param {Message[]|Message} data\n     * @returns\n     */\n    pushAvChatRoomMessageList: function pushAvChatRoomMessageList(state, data) {\n      // 自定义消息结构体\n      // \"{\"version\":\"1.0.0\",\"message\":\"\",\"command\":\"4\",\"action\":301}\" 点赞消息\n      // \"{\"version\":\"1.0.0\",\"message\":\"Qq\",\"command\":\"5\",\"action\":301}\" 弹幕消息\n      // \"{\"version\":\"1.0.0\",\"message\":\"2\",\"command\":\"6\",\"action\":301}\" 礼物消息\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        var result = data.filter(function (item) {\n          return item.to === state.groupLiveInfo.roomID;\n        });\n        state.avChatRoomMessageList = [].concat(_toConsumableArray(state.avChatRoomMessageList), _toConsumableArray(result)); // 弹幕、礼物消息暂时不需要单独处理，此处逻辑先注释\n        // const customMessageList = result.filter(item => item.type === 'TIMCustomElem')\n        // const barrageMessageList = []\n        // const giftMessageList = []\n        // customMessageList.forEach(item => {\n        //   const data = JSON.parse(item.payload.data)\n        //   if (data.command === '5') {\n        //     barrageMessageList.push(item)\n        //   }\n        //   if (data.command === '6') {\n        //     giftMessageList.push(item)\n        //   }\n        // })\n        // state.avChatRoomBarrageMessageList = [...state.avChatRoomBarrageMessageList, ...barrageMessageList]\n        // state.avChatRoomGiftMessageList = [...state.avChatRoomGiftMessageList, ...giftMessageList]\n      } else if (data.to === state.groupLiveInfo.roomID) {\n        state.avChatRoomMessageList = [].concat(_toConsumableArray(state.avChatRoomMessageList), [data]); // if (data.type === 'TIMCustomElem') {\n        //   const Data = JSON.parse(data.payload.data)\n        //   if (Data.command === '5') {\n        //     state.avChatRoomBarrageMessageList = [...state.avChatRoomBarrageMessageList, data]\n        //   }\n        //   if (Data.command === '6') {\n        //     state.avChatRoomGiftMessageList = [...state.avChatRoomGiftMessageList, data]\n        //   }\n        // }\n      }\n    }\n  },\n  actions: {}\n};\nexport default groupLiveModules;",{"version":3,"sources":["/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/store/modules/groupLive.js"],"names":["groupLiveModules","state","groupLiveInfo","groupID","roomID","anchorID","roomName","isNeededQuitRoom","avChatRoomMessageList","avChatRoomGiftMessageList","avChatRoomBarrageMessageList","getters","mutations","updateGroupLiveInfo","payload","resetGroupLiveInfo","clearAvChatRoomMessageList","pushAvChatRoomMessageList","data","Array","isArray","result","filter","item","to","actions"],"mappings":";;;;;;;;;;AAAA,IAAMA,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE;AACbC,MAAAA,OAAO,EAAE,CADI;AACD;AACZC,MAAAA,MAAM,EAAE,CAFK;AAEF;AACXC,MAAAA,QAAQ,EAAE,CAHG;AAGA;AACbC,MAAAA,QAAQ,EAAE,EAJG;AAIC;AACdC,MAAAA,gBAAgB,EAAE,CALL,CAKO;;AALP,KADV;AAQLC,IAAAA,qBAAqB,EAAE,EARlB;AAQsB;AAC3BC,IAAAA,yBAAyB,EAAE,EATtB;AAS0B;AAC/BC,IAAAA,4BAA4B,EAAE,EAVzB,CAU4B;;AAV5B,GADgB;AAavBC,EAAAA,OAAO,EAAE,EAbc;AAcvBC,EAAAA,SAAS,EAAE;AACT;AACJ;AACA;AACA;AACA;AACIC,IAAAA,mBANS,+BAMWZ,KANX,EAMkBa,OANlB,EAM2B;AAClCb,MAAAA,KAAK,CAACC,aAAN,mCAA2BD,KAAK,CAACC,aAAjC,GAAmDY,OAAnD;AACD,KARQ;;AAST;AACJ;AACA;AACA;AACA;AACIC,IAAAA,kBAdS,8BAcUd,KAdV,EAciBa,OAdjB,EAc0B;AACjCb,MAAAA,KAAK,CAACC,aAAN,mCAA2BD,KAAK,CAACC,aAAjC,GAAmDY,OAAnD;AACD,KAhBQ;;AAiBT;AACJ;AACA;AACA;AACA;AACIE,IAAAA,0BAtBS,sCAsBkBf,KAtBlB,EAsByB;AAChCA,MAAAA,KAAK,CAACO,qBAAN,GAA8B,EAA9B;AACAP,MAAAA,KAAK,CAACS,4BAAN,GAAqC,EAArC;AACAT,MAAAA,KAAK,CAACQ,yBAAN,GAAkC,EAAlC;AACD,KA1BQ;;AA2BT;AACJ;AACA;AACA;AACA;AACA;AACIQ,IAAAA,yBAjCS,qCAiCiBhB,KAjCjB,EAiCwBiB,IAjCxB,EAiC8B;AACrC;AACA;AACA;AACA;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvB;AACA,YAAMG,MAAM,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAL,KAAYvB,KAAK,CAACC,aAAN,CAAoBE,MAApC;AAAA,SAAhB,CAAf;AACAH,QAAAA,KAAK,CAACO,qBAAN,gCAAkCP,KAAK,CAACO,qBAAxC,sBAAkEa,MAAlE,GAHuB,CAIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAnBD,MAmBO,IAAIH,IAAI,CAACM,EAAL,KAAYvB,KAAK,CAACC,aAAN,CAAoBE,MAApC,EAA4C;AACjDH,QAAAA,KAAK,CAACO,qBAAN,gCAAkCP,KAAK,CAACO,qBAAxC,IAA+DU,IAA/D,GADiD,CAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF;AArEQ,GAdY;AAqFvBO,EAAAA,OAAO,EAAE;AArFc,CAAzB;AAwFA,eAAezB,gBAAf","sourcesContent":["const groupLiveModules = {\n  state: {\n    groupLiveInfo: {\n      groupID: 0, // 群内直播时为当前群的ID,群组外直播时groupID设置为0\n      roomID: 0, // 直播间ID,直播间内的直播群ID与roomID相同\n      anchorID: 0, // 主播ID\n      roomName: '', // 直播间名称\n      isNeededQuitRoom: 0 // 是否需要主动退出直播间 0 默认 1 主动退出\n    },\n    avChatRoomMessageList: [], // 群直播中直播群消息列表\n    avChatRoomGiftMessageList: [], // 群直播中直播群礼物消息列表\n    avChatRoomBarrageMessageList: [] // 群直播中直播群弹幕消息列表\n  },\n  getters: {},\n  mutations: {\n    /**\n     * 更新群直播信息\n     * @param {Object} state\n     * @param {Object} payload\n     */\n    updateGroupLiveInfo(state, payload) {\n      state.groupLiveInfo = { ...state.groupLiveInfo, ...payload }\n    },\n    /**\n     * 重置群直播信息\n     * @param {Object} state\n     * @param {Object} payload\n     */\n    resetGroupLiveInfo(state, payload) {\n      state.groupLiveInfo = { ...state.groupLiveInfo, ...payload }\n    },\n    /**\n     * 清除群直播消息列表\n     * @param {Object} state\n     * @param {Object} payload\n     */\n    clearAvChatRoomMessageList(state) {\n      state.avChatRoomMessageList = []\n      state.avChatRoomBarrageMessageList = []\n      state.avChatRoomGiftMessageList = []\n    },\n    /**\n     * 将群直播内的直播群消息push进列表\n     * @param {Object} state\n     * @param {Message[]|Message} data\n     * @returns\n     */\n    pushAvChatRoomMessageList(state, data) {\n      // 自定义消息结构体\n      // \"{\"version\":\"1.0.0\",\"message\":\"\",\"command\":\"4\",\"action\":301}\" 点赞消息\n      // \"{\"version\":\"1.0.0\",\"message\":\"Qq\",\"command\":\"5\",\"action\":301}\" 弹幕消息\n      // \"{\"version\":\"1.0.0\",\"message\":\"2\",\"command\":\"6\",\"action\":301}\" 礼物消息\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        const result = data.filter(item => item.to === state.groupLiveInfo.roomID)\n        state.avChatRoomMessageList = [...state.avChatRoomMessageList, ...result]\n        // 弹幕、礼物消息暂时不需要单独处理，此处逻辑先注释\n        // const customMessageList = result.filter(item => item.type === 'TIMCustomElem')\n        // const barrageMessageList = []\n        // const giftMessageList = []\n        // customMessageList.forEach(item => {\n        //   const data = JSON.parse(item.payload.data)\n        //   if (data.command === '5') {\n        //     barrageMessageList.push(item)\n        //   }\n        //   if (data.command === '6') {\n        //     giftMessageList.push(item)\n        //   }\n        // })\n        // state.avChatRoomBarrageMessageList = [...state.avChatRoomBarrageMessageList, ...barrageMessageList]\n        // state.avChatRoomGiftMessageList = [...state.avChatRoomGiftMessageList, ...giftMessageList]\n      } else if (data.to === state.groupLiveInfo.roomID) {\n        state.avChatRoomMessageList = [...state.avChatRoomMessageList, data]\n        // if (data.type === 'TIMCustomElem') {\n        //   const Data = JSON.parse(data.payload.data)\n        //   if (Data.command === '5') {\n        //     state.avChatRoomBarrageMessageList = [...state.avChatRoomBarrageMessageList, data]\n        //   }\n        //   if (Data.command === '6') {\n        //     state.avChatRoomGiftMessageList = [...state.avChatRoomGiftMessageList, data]\n        //   }\n        // }\n      }\n    },\n  },\n  actions: {}\n}\n\nexport default groupLiveModules\n"]}]}