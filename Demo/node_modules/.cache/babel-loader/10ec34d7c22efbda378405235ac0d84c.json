{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/message/message-send-box.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/message/message-send-box.vue","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nimport _Rate2 from \"element-ui/lib/theme-chalk/rate.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Rate from \"element-ui/lib/rate\";\nimport _Tooltip2 from \"element-ui/lib/theme-chalk/tooltip.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tooltip from \"element-ui/lib/tooltip\";\nimport _Popover2 from \"element-ui/lib/theme-chalk/popover.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Popover from \"element-ui/lib/popover\";\nimport _Dialog2 from \"element-ui/lib/theme-chalk/dialog.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Dialog from \"element-ui/lib/dialog\";\nimport _FormItem2 from \"element-ui/lib/theme-chalk/form-item.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _FormItem from \"element-ui/lib/form-item\";\nimport _Form2 from \"element-ui/lib/theme-chalk/form.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Form from \"element-ui/lib/form\";\nimport _Input2 from \"element-ui/lib/theme-chalk/input.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Input from \"element-ui/lib/input\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport callingMemberList from \"./trtc-calling/group-member-list\";\nimport { emojiMap, emojiName, emojiUrl } from \"../../utils/emojiMap\";\nexport default {\n  name: 'message-send-box',\n  props: ['scrollMessageListToButtom'],\n  components: {\n    callingMemberList: callingMemberList,\n    ElInput: _Input,\n    ElForm: _Form,\n    ElFormItem: _FormItem,\n    ElDialog: _Dialog,\n    ElPopover: _Popover,\n    ElTooltip: _Tooltip,\n    ElRate: _Rate\n  },\n  data: function data() {\n    return {\n      callingList: [],\n      groupAtList: [],\n      listTpye: '',\n      callingType: '',\n      groupAt: false,\n      showCallingMember: false,\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\n      messageContent: '',\n      isSendCustomMessage: false,\n      sendCustomDialogVisible: false,\n      surveyDialogVisible: false,\n      form: {\n        data: '',\n        description: '',\n        extension: ''\n      },\n      rate: 5,\n      // 评分\n      suggestion: '',\n      // 建议\n      file: '',\n      emojiMap: emojiMap,\n      emojiName: emojiName,\n      emojiUrl: emojiUrl,\n      showAtGroupMember: false,\n      atUserID: '',\n      focus: false,\n      popoverVisible: false,\n      faceUrl: 'https://web.sdk.qcloud.com/im/assets/face-elem/',\n      emojiShow: true,\n      bigEmojiShow: false,\n      bigEmojiList: [{\n        icon: 'yz00',\n        list: ['yz00', 'yz01', 'yz02', 'yz03', 'yz04', 'yz05', 'yz06', 'yz07', 'yz08', 'yz09', 'yz10', 'yz11', 'yz12', 'yz13', 'yz14', 'yz15', 'yz16', 'yz17']\n      }, {\n        icon: 'ys00',\n        list: ['ys00', 'ys01', 'ys02', 'ys03', 'ys04', 'ys05', 'ys06', 'ys07', 'ys08', 'ys09', 'ys10', 'ys11', 'ys12', 'ys13', 'ys14', 'ys15']\n      }, {\n        icon: 'gcs00',\n        list: ['gcs00', 'gcs01', 'gcs02', 'gcs03', 'gcs04', 'gcs05', 'gcs06', 'gcs07', 'gcs08', 'gcs09', 'gcs10', 'gcs11', 'gcs12', 'gcs13', 'gcs14', 'gcs15', 'gcs16']\n      }],\n      curItemIndex: 0,\n      curBigEmojiItemList: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['toAccount', 'currentConversationType'])), mapState({\n    memberList: function memberList(state) {\n      return state.group.currentMemberList;\n    },\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    groupProfile: function groupProfile(state) {\n      return state.conversation.currentConversation.groupProfile;\n    }\n  })),\n  mounted: function mounted() {\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste);\n    this.$bus.$on('reEditMessage', this.reEditMessage);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste);\n  },\n  methods: {\n    getList: function getList(value) {\n      this.callingList = value.map(function (item) {\n        var obj = JSON.parse(item);\n        return obj.userID;\n      });\n      this.groupAtList = value.map(function (item) {\n        var data = JSON.parse(item);\n        return data.nick;\n      });\n    },\n    cancelCalling: function cancelCalling() {\n      this.showCallingMember = false;\n    },\n    callingHandler: function callingHandler() {\n      var _this = this;\n\n      if (this.callingList.length < 1) {\n        this.$store.commit('showMessage', {\n          type: 'warning',\n          message: '请选择成员'\n        });\n        return;\n      }\n\n      if (this.listTpye === 'groupAt') {\n        this.groupAtList.forEach(function (item, index) {\n          if (index === 0) {\n            _this.messageContent += \"\".concat(item, \" \");\n          } else {\n            _this.messageContent += \"@\".concat(item, \" \");\n          }\n        });\n        this.showCallingMember = false;\n        this.$refs['text-input'].focus();\n        return;\n      }\n\n      if (this.listTpye === 'calling') {\n        var callingData = {\n          memberList: this.callingList,\n          type: this.TIM.TYPES.CONV_GROUP\n        };\n        this.$store.commit('setCallingList', callingData);\n\n        if (this.callingType === 'video') {\n          this.$bus.$emit('video-call');\n        }\n\n        if (this.callingType === 'audio') {\n          this.$bus.$emit('audio-call');\n        }\n\n        this.showCallingMember = false;\n      }\n    },\n    trtcCalling: function trtcCalling(type) {\n      this.listTpye = 'calling';\n\n      if (type === 'video') {\n        this.callingType = 'video';\n      }\n\n      if (type === 'audio') {\n        this.callingType = 'audio';\n      } // 呼叫方设置\n\n\n      if (this.currentConversationType === 'C2C') {\n        var member = [this.toAccount];\n        var callingData = {\n          memberList: member,\n          type: 'C2C'\n        };\n        this.$store.commit('setCallingList', callingData);\n        this.$bus.$emit(\"\".concat(type, \"-call\"));\n        return;\n      }\n\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP) {\n        this.showCallingMember = true;\n      } // this.$store.commit('pushCurrentMessageList', true)\n\n    },\n    handleEmojiShow: function handleEmojiShow() {\n      this.emojiShow = true;\n      this.bigEmojiShow = false;\n    },\n    handleBigEmojiShow: function handleBigEmojiShow(index) {\n      var elm = document.getElementById('bigEmojiBox');\n      elm && (elm.scrollTop = 0);\n      this.curItemIndex = index;\n      this.curBigEmojiItemList = this.bigEmojiList[index].list;\n      this.emojiShow = false;\n      this.bigEmojiShow = true;\n    },\n    chooseBigEmoji: function chooseBigEmoji(item) {\n      var _this2 = this;\n\n      this.popoverVisible = false;\n      var message = this.tim.createFaceMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          index: this.curItemIndex + 1,\n          data: \"\".concat(item, \"@2x\")\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.$bus.$emit('scroll-bottom');\n      this.tim.sendMessage(message).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    reEditMessage: function reEditMessage(payload) {\n      this.messageContent = payload;\n    },\n    handleUp: function handleUp() {\n      var _this3 = this;\n\n      var index = this.memberList.findIndex(function (member) {\n        return member.userID === _this3.atUserID;\n      });\n\n      if (index - 1 < 0) {\n        return;\n      }\n\n      this.atUserID = this.memberList[index - 1].userID;\n    },\n    handleDown: function handleDown() {\n      var _this4 = this;\n\n      var index = this.memberList.findIndex(function (member) {\n        return member.userID === _this4.atUserID;\n      });\n\n      if (index + 1 >= this.memberList.length) {\n        return;\n      }\n\n      this.atUserID = this.memberList[index + 1].userID;\n    },\n    handleEnter: function handleEnter() {\n      this.sendTextMessage();\n    },\n    inputChange: function inputChange(value) {\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && value.data === '@') {\n        this.groupAt = true;\n        this.listTpye = 'groupAt';\n        this.showCallingMember = true;\n      }\n\n      if (value.data === ' ' && this.messageContent.indexOf('@ ') !== -1) {\n        this.groupAt = false;\n        this.listTpye = '';\n        this.showCallingMember = false;\n      }\n    },\n    handleLine: function handleLine() {\n      this.messageContent += '\\n';\n    },\n    handlePaste: function handlePaste(e) {\n      var _this5 = this;\n\n      var clipboardData = e.clipboardData;\n      var file;\n\n      if (clipboardData && clipboardData.files && clipboardData.files.length > 0) {\n        file = clipboardData.files[0];\n      }\n\n      if (typeof file === 'undefined') {\n        return;\n      } // 1. 创建消息实例，接口返回的实例可以上屏\n\n\n      var message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: file\n        },\n        onProgress: function onProgress(percent) {\n          _this5.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message); // 2. 发送消息\n\n      var promise = this.tim.sendMessage(message);\n      promise.catch(function (error) {\n        _this5.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n    },\n    dropHandler: function dropHandler(e) {\n      var _this6 = this;\n\n      e.preventDefault();\n      var file = e.dataTransfer.files[0];\n      var message = {};\n\n      if (file.type === 'video/mp4') {\n        message = this.tim.createVideoMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: function onProgress(percent) {\n            _this6.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n          }\n        });\n      } else {\n        message = this.tim.createFileMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: function onProgress(percent) {\n            _this6.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n          }\n        });\n      }\n\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this6.$refs.videoPicker.value = null;\n      }).catch(function (imError) {\n        _this6.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    sendTextMessage: function sendTextMessage() {\n      var _this7 = this;\n\n      if (this.messageContent === '' || this.messageContent.trim().length === 0) {\n        this.messageContent = '';\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息哦！',\n          type: 'info'\n        });\n        return;\n      }\n\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && this.groupAt) {\n        var _message = this.tim.createTextAtMessage({\n          to: this.toAccount,\n          conversationType: this.TIM.TYPES.CONV_GROUP,\n          payload: {\n            text: this.messageContent,\n            atUserList: this.callingList // 'denny' 'lucy' 都是 userID，而非昵称\n\n          }\n        });\n\n        this.$store.commit('pushCurrentMessageList', _message);\n        this.$bus.$emit('scroll-bottom');\n        this.tim.sendMessage(_message).catch(function (error) {\n          _this7.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          });\n        });\n        this.messageContent = '';\n        this.groupAt = false;\n        return;\n      }\n\n      var message = this.tim.createTextMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          text: this.messageContent\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.$bus.$emit('scroll-bottom');\n      this.tim.sendMessage(message).catch(function (error) {\n        _this7.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n      this.messageContent = '';\n    },\n    sendCustomMessage: function sendCustomMessage() {\n      var _this8 = this;\n\n      if (this.form.data.length === 0 && this.form.description.length === 0 && this.form.extension.length === 0) {\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息',\n          type: 'info'\n        });\n        return;\n      }\n\n      var message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: this.form.data,\n          description: this.form.description,\n          extension: this.form.extension\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).catch(function (error) {\n        _this8.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      });\n      this.sendCustomDialogVisible = false;\n    },\n    random: function random(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n    sendSurvey: function sendSurvey() {\n      var _this9 = this;\n\n      var message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: 'survey',\n          description: String(this.rate),\n          extension: this.suggestion\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      });\n      this.tim.sendMessage(message).then(function () {\n        Object.assign(_this9, {\n          rate: 5,\n          suggestion: ''\n        });\n      }).catch(function (error) {\n        _this9.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        });\n      });\n      this.surveyDialogVisible = false;\n    },\n    chooseEmoji: function chooseEmoji(item) {\n      this.messageContent += item;\n    },\n    handleSendImageClick: function handleSendImageClick() {\n      this.$refs.imagePicker.click();\n    },\n    handleSendFileClick: function handleSendFileClick() {\n      this.$refs.filePicker.click();\n    },\n    handleSendVideoClick: function handleSendVideoClick() {\n      this.$refs.videoPicker.click();\n    },\n    groupLive: function groupLive() {\n      this.$store.commit('updateGroupLiveInfo', {\n        groupID: this.toAccount,\n        anchorID: this.userID\n      });\n      this.$bus.$emit('open-group-live', {\n        channel: 1\n      });\n    },\n    sendImage: function sendImage() {\n      var _this10 = this;\n\n      var message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('imagePicker') // 或者用event.target\n\n        },\n        onProgress: function onProgress(percent) {\n          _this10.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this10.$refs.imagePicker.value = null;\n      }).catch(function (imError) {\n        _this10.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    sendFile: function sendFile() {\n      var _this11 = this;\n\n      var message = this.tim.createFileMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('filePicker') // 或者用event.target\n\n        },\n        onProgress: function onProgress(percent) {\n          _this11.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this11.$refs.filePicker.value = null;\n      }).catch(function (imError) {\n        _this11.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    sendVideo: function sendVideo() {\n      var _this12 = this;\n\n      var message = this.tim.createVideoMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('videoPicker') // 或者用event.target\n\n        },\n        onProgress: function onProgress(percent) {\n          _this12.$set(message, 'progress', percent); // 手动给message 实例加个响应式属性: progress\n\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message);\n      this.tim.sendMessage(message).then(function () {\n        _this12.$refs.videoPicker.value = null;\n      }).catch(function (imError) {\n        _this12.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AAUA;AAEA;AACAA,0BADA;AAEAC,sCAFA;AAGAC;AACAC,wCADA;AAEAC,mBAFA;AAGAC,iBAHA;AAIAC,yBAJA;AAKAC,qBALA;AAMAC,uBANA;AAOAC,uBAPA;AAQAC;AARA,GAHA;AAaAC,MAbA,kBAaA;AACA;AACAC,qBADA;AAEAC,qBAFA;AAGAC,kBAHA;AAIAC,qBAJA;AAKAC,oBALA;AAMAC,8BANA;AAOAC,+CAPA;AAQAC,wBARA;AASAC,gCATA;AAUAC,oCAVA;AAWAC,gCAXA;AAYAC;AACAZ,gBADA;AAEAa,uBAFA;AAGAC;AAHA,OAZA;AAiBAC,aAjBA;AAiBA;AACAC,oBAlBA;AAkBA;AACAC,cAnBA;AAoBAC,wBApBA;AAqBAC,0BArBA;AAsBAC,wBAtBA;AAuBAC,8BAvBA;AAwBAC,kBAxBA;AAyBAC,kBAzBA;AA0BAC,2BA1BA;AA2BAC,gEA3BA;AA4BAC,qBA5BA;AA6BAC,yBA7BA;AA8BAC,qBACA;AACAC,oBADA;AAEAC;AAFA,OADA,EAKA;AACAD,oBADA;AAEAC;AAFA,OALA,EASA;AACAD,qBADA;AAEAC;AAFA,OATA,CA9BA;AA4CAC,qBA5CA;AA6CAC;AA7CA;AA+CA,GA7DA;AA8DAC,4CACAC,oDADA,GAEAC;AACAC;AAAA;AAAA,KADA;AAEAC;AAAA;AAAA,KAFA;AAGAC;AAAA;AAAA;AAHA,IAFA,CA9DA;AAsEAC,SAtEA,qBAsEA;AACA;AACA;AACA,GAzEA;AA0EAC,eA1EA,2BA0EA;AACA;AACA,GA5EA;AA6EAC;AACAC,WADA,mBACAC,KADA,EACA;AACA;AACA;AACA;AACA,OAHA;AAIA;AACA;AACA;AACA,OAHA;AAIA,KAVA;AAWAC,iBAXA,2BAWA;AACA;AACA,KAbA;AAcAC,kBAdA,4BAcA;AAAA;;AACA;AACA;AACAC,yBADA;AAEAC;AAFA;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA,WAFA,MAEA;AACA;AACA;AACA,SANA;AAOA;AACA;AACA;AACA;;AACA;AACA;AACAX,sCADA;AAEAU;AAFA;AAIA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AAEA,KAjDA;AAkDAE,eAlDA,uBAkDAF,IAlDA,EAkDA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,OAPA,CAQA;;;AACA;AACA;AACA;AACAV,4BADA;AAEAU;AAFA;AAIA;AACA;AACA;AACA;;AACA;AACA;AACA,OArBA,CAsBA;;AACA,KAzEA;AA0EAG,mBA1EA,6BA0EA;AACA;AACA;AACA,KA7EA;AA8EAC,sBA9EA,8BA8EAC,KA9EA,EA8EA;AACA;AACAC;AACA;AACA;AACA;AACA;AACA,KArFA;AAsFAC,kBAtFA,0BAsFAC,IAtFA,EAsFA;AAAA;;AACA;AACA;AACAC,0BADA;AAEAC,sDAFA;AAGAC;AACAN,sCADA;AAEAnD;AAFA;AAHA;AAQA;AACA;AACA;AACA;AACA8C,uBADA;AAEAC;AAFA;AAIA,OALA;AAMA,KAxGA;AAyGAW,iBAzGA,yBAyGAD,OAzGA,EAyGA;AACA;AACA,KA3GA;AA4GAE,YA5GA,sBA4GA;AAAA;;AACA,4CACA;AAAA;AAAA,OADA;;AAGA;AACA;AACA;;AACA;AACA,KApHA;AAqHAC,cArHA,wBAqHA;AAAA;;AACA,4CACA;AAAA;AAAA,OADA;;AAGA;AACA;AACA;;AACA;AACA,KA7HA;AA8HAC,eA9HA,yBA8HA;AACA;AACA,KAhIA;AAiIAC,eAjIA,uBAiIAnB,KAjIA,EAiIA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,KA5IA;AA6IAoB,cA7IA,wBA6IA;AACA;AACA,KA/IA;AAgJAC,eAhJA,uBAgJAC,CAhJA,EAgJA;AAAA;;AACA;AACA;;AACA,UACAC,iBACAA,mBADA,IAEAA,8BAHA,EAIA;AACAjD;AACA;;AAEA;AACA;AACA,OAbA,CAcA;;;AACA;AACAsC,0BADA;AAEAC,sDA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","names":["name","props","components","callingMemberList","ElInput","ElForm","ElFormItem","ElDialog","ElPopover","ElTooltip","ElRate","data","callingList","groupAtList","listTpye","callingType","groupAt","showCallingMember","colors","messageContent","isSendCustomMessage","sendCustomDialogVisible","surveyDialogVisible","form","description","extension","rate","suggestion","file","emojiMap","emojiName","emojiUrl","showAtGroupMember","atUserID","focus","popoverVisible","faceUrl","emojiShow","bigEmojiShow","bigEmojiList","icon","list","curItemIndex","curBigEmojiItemList","computed","mapGetters","mapState","memberList","userID","groupProfile","mounted","beforeDestroy","methods","getList","value","cancelCalling","callingHandler","type","message","trtcCalling","handleEmojiShow","handleBigEmojiShow","index","elm","chooseBigEmoji","item","to","conversationType","payload","reEditMessage","handleUp","handleDown","handleEnter","inputChange","handleLine","handlePaste","e","clipboardData","onProgress","promise","dropHandler","sendMessage","then","catch","sendTextMessage","text","atUserList","sendCustomMessage","Object","random","min","max","sendSurvey","chooseEmoji","handleSendImageClick","handleSendFileClick","handleSendVideoClick","groupLive","groupID","anchorID","channel","sendImage","sendFile","sendVideo"],"sourceRoot":"src/components/message","sources":["message-send-box.vue"],"sourcesContent":["<template>\n  <div id=\"message-send-box-wrapper\" :style=\"focus ? {'backgroundColor': 'white'} : {}\" @drop=\"dropHandler\">\n    <div class=\"send-header-bar\">\n      <el-popover placement=\"top\" width=\"400\" trigger=\"click\">\n        <div class=\"emojis\">\n          <div v-for=\"item in emojiName\" class=\"emoji\" :key=\"item\" @click=\"chooseEmoji(item)\">\n            <img :src=\"emojiUrl + emojiMap[item]\" style=\"width:30px;height:30px\" />\n          </div>\n        </div>\n        <i class=\"iconfont icon-smile\" slot=\"reference\" title=\"发表情\"></i>\n      </el-popover>\n      <i class=\"iconfont icon-tupian\" title=\"发图片\" @click=\"handleSendImageClick\"></i>\n      <i class=\"el-icon-camera\" title=\"发视频\" @click=\"handleSendVideoClick\"></i>\n      <i class=\"iconfont icon-wenjian\" title=\"发文件\" @click=\"handleSendFileClick\"></i>\n      <i class=\"iconfont icon-zidingyi\" title=\"发自定义消息\" @click=\"sendCustomDialogVisible = true\"></i>\n      <i class=\"iconfont icon-diaocha\" title=\"小调查\" @click=\"surveyDialogVisible = true\"></i>\n      <el-dropdown>\n      <span class=\"el-dropdown-link\">\n      <i class=\"el-icon-phone-outline\" v-if=\"toAccount !== userID\" title=\"语音通话\"></i>\n      </span>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item  @click.native=\"trtcCalling('video')\">视频通话</el-dropdown-item>\n          <el-dropdown-item  @click.native=\"trtcCalling('audio')\">语音通话</el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n      <div class=\"group-live-icon-box\" v-if=\"currentConversationType === TIM.TYPES.CONV_GROUP && groupProfile.type !== 'AVChatRoom'\" title=\"群直播\" @click=\"groupLive\">\n        <i class=\"group-live-icon\"></i>\n        <i class=\"group-live-icon-hover\"></i>\n      </div>\n    </div>\n    <el-dialog title=\"发自定义消息\" :visible.sync=\"sendCustomDialogVisible\" width=\"30%\">\n      <el-form label-width=\"100px\">\n        <el-form-item label=\"data\">\n          <el-input v-model=\"form.data\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"description\">\n          <el-input v-model=\"form.description\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"extension\">\n          <el-input v-model=\"form.extension\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"sendCustomDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"sendCustomMessage\">确 定</el-button>\n      </span>\n    </el-dialog>\n    <el-dialog title=\"对IM Web demo的建议和使用感受\" :visible.sync=\"surveyDialogVisible\" width=\"30%\">\n      <el-form label-width=\"100px\">\n        <el-form-item label=\"评分\">\n          <div class=\"block\">\n            <el-rate v-model=\"rate\" :colors=\"colors\" show-text></el-rate>\n          </div>\n        </el-form-item>\n        <el-form-item label=\"建议\">\n          <el-input\n            type=\"textarea\"\n            :rows=\"2\"\n            placeholder=\"请输入内容\"\n            resize=\"none\"\n            v-model=\"suggestion\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"surveyDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"sendSurvey\">确 定</el-button>\n      </span>\n    </el-dialog>\n    <div class=\"bottom\">\n      <textarea\n        ref=\"text-input\"\n        rows=\"4\"\n        resize=\"false\"\n        v-model=\"messageContent\"\n        class=\"text-input\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n        @input=\"inputChange\"\n        @keydown.enter.exact.prevent=\"handleEnter\"\n        @keyup.ctrl.enter.prevent.exact=\"handleLine\"\n        @keydown.up.stop=\"handleUp\"\n        @keydown.down.stop=\"handleDown\"\n      >\n      </textarea>\n      <el-tooltip\n        class=\"item\"\n        effect=\"dark\"\n        content=\"按Enter发送消息，Ctrl+Enter换行\"\n        placement=\"left-start\"\n      >\n        <div class=\"btn-send\" @click=\"sendTextMessage\">\n          <div class=\"tim-icon-send\"></div>\n        </div>\n      </el-tooltip>\n    </div>\n    <input\n      type=\"file\"\n      id=\"imagePicker\"\n      ref=\"imagePicker\"\n      accept=\".jpg, .jpeg, .png, .gif, .bmp\"\n      @change=\"sendImage\"\n      style=\"display:none\"\n    />\n    <input type=\"file\" id=\"filePicker\" ref=\"filePicker\" @change=\"sendFile\" style=\"display:none\" />\n    <input type=\"file\" id=\"videoPicker\" ref=\"videoPicker\" @change=\"sendVideo\" style=\"display:none\" accept=\".mp4\"/>\n    <div class=\"calling-member-list\" v-if=\"currentConversationType === TIM.TYPES.CONV_GROUP && showCallingMember\">\n      <calling-member-list @getList=\"getList\" :type=\"listTpye\"></calling-member-list>\n      <div class=\"calling-list-btn\">\n        <span class=\"calling-btn\" @click=\"cancelCalling\">取消</span>\n        <span class=\"calling-btn\" @click=\"callingHandler\">确定</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex'\nimport callingMemberList from './trtc-calling/group-member-list'\nimport {\n  Form,\n  FormItem,\n  Input,\n  Dialog,\n  Popover,\n  Tooltip,\n  Rate\n} from 'element-ui'\nimport { emojiMap, emojiName, emojiUrl } from '../../utils/emojiMap'\n\nexport default {\n  name: 'message-send-box',\n  props: ['scrollMessageListToButtom'],\n  components: {\n    callingMemberList: callingMemberList,\n    ElInput: Input,\n    ElForm: Form,\n    ElFormItem: FormItem,\n    ElDialog: Dialog,\n    ElPopover: Popover,\n    ElTooltip: Tooltip,\n    ElRate: Rate\n  },\n  data() {\n    return {\n      callingList: [],\n      groupAtList: [],\n      listTpye:'',\n      callingType: '',\n      groupAt:false,\n      showCallingMember: false,\n      colors: ['#99A9BF', '#F7BA2A', '#FF9900'],\n      messageContent: '',\n      isSendCustomMessage: false,\n      sendCustomDialogVisible: false,\n      surveyDialogVisible: false,\n      form: {\n        data: '',\n        description: '',\n        extension: ''\n      },\n      rate: 5, // 评分\n      suggestion: '', // 建议\n      file: '',\n      emojiMap: emojiMap,\n      emojiName: emojiName,\n      emojiUrl: emojiUrl,\n      showAtGroupMember: false,\n      atUserID: '',\n      focus: false,\n      popoverVisible: false,\n      faceUrl: 'https://web.sdk.qcloud.com/im/assets/face-elem/',\n      emojiShow: true,\n      bigEmojiShow: false,\n      bigEmojiList: [\n        {\n          icon: 'yz00',\n          list: ['yz00', 'yz01', 'yz02', 'yz03', 'yz04', 'yz05', 'yz06', 'yz07', 'yz08', 'yz09', 'yz10', 'yz11', 'yz12', 'yz13', 'yz14', 'yz15', 'yz16', 'yz17']\n        },\n        {\n          icon: 'ys00',\n          list: ['ys00', 'ys01', 'ys02', 'ys03', 'ys04', 'ys05', 'ys06', 'ys07', 'ys08', 'ys09', 'ys10', 'ys11', 'ys12', 'ys13', 'ys14', 'ys15']\n        },\n        {\n          icon: 'gcs00',\n          list: ['gcs00', 'gcs01', 'gcs02', 'gcs03', 'gcs04', 'gcs05', 'gcs06', 'gcs07', 'gcs08', 'gcs09', 'gcs10', 'gcs11', 'gcs12', 'gcs13', 'gcs14', 'gcs15', 'gcs16']\n        }\n      ],\n      curItemIndex: 0,\n      curBigEmojiItemList: []\n    }\n  },\n  computed: {\n    ...mapGetters(['toAccount', 'currentConversationType']),\n    ...mapState({\n      memberList: state => state.group.currentMemberList,\n      userID: state => state.user.userID,\n      groupProfile: state => state.conversation.currentConversation.groupProfile\n    })\n  },\n  mounted() {\n    this.$refs['text-input'].addEventListener('paste', this.handlePaste)\n    this.$bus.$on('reEditMessage', this.reEditMessage)\n  },\n  beforeDestroy() {\n    this.$refs['text-input'].removeEventListener('paste', this.handlePaste)\n  },\n  methods: {\n    getList(value) {\n      this.callingList = value.map((item) => {\n        let obj = JSON.parse(item)\n        return obj.userID\n      })\n      this.groupAtList = value.map((item) => {\n        let data = JSON.parse(item)\n        return data.nick\n      })\n    },\n    cancelCalling() {\n      this.showCallingMember = false\n    },\n    callingHandler() {\n      if (this.callingList.length < 1) {\n        this.$store.commit('showMessage', {\n          type: 'warning',\n          message: '请选择成员'\n        })\n        return\n      }\n      if (this.listTpye === 'groupAt') {\n        this.groupAtList.forEach((item, index) => {\n          if(index===0) {\n            this.messageContent += `${item} `\n          }else{\n            this.messageContent += `@${item} `\n          }\n        })\n        this.showCallingMember = false\n        this.$refs['text-input'].focus()\n        return\n      }\n      if (this.listTpye === 'calling') {\n        let callingData = {\n          memberList:this.callingList,\n          type:this.TIM.TYPES.CONV_GROUP\n        }\n        this.$store.commit('setCallingList',callingData)\n        if (this.callingType === 'video') {\n          this.$bus.$emit('video-call')\n        }\n        if (this.callingType === 'audio') {\n          this.$bus.$emit('audio-call')\n        }\n        this.showCallingMember = false\n      }\n\n    },\n    trtcCalling(type) {\n      this.listTpye = 'calling'\n      if (type === 'video') {\n        this.callingType = 'video'\n      }\n      if (type === 'audio') {\n        this.callingType = 'audio'\n      }\n      // 呼叫方设置\n      if(this.currentConversationType === 'C2C') {\n        let member = [this.toAccount]\n        let callingData = {\n          memberList:member,\n          type:'C2C'\n        }\n        this.$store.commit('setCallingList',callingData)\n        this.$bus.$emit(`${type}-call`)\n        return\n      }\n      if(this.currentConversationType === this.TIM.TYPES.CONV_GROUP) {\n        this.showCallingMember = true\n      }\n      // this.$store.commit('pushCurrentMessageList', true)\n    },\n    handleEmojiShow () {\n      this.emojiShow = true\n      this.bigEmojiShow = false\n    },\n    handleBigEmojiShow(index) {\n      let elm = document.getElementById('bigEmojiBox')\n      elm && (elm.scrollTop = 0)\n      this.curItemIndex = index\n      this.curBigEmojiItemList = this.bigEmojiList[index].list\n      this.emojiShow = false\n      this.bigEmojiShow = true\n    },\n    chooseBigEmoji(item) {\n      this.popoverVisible = false\n      let message = this.tim.createFaceMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          index: this.curItemIndex + 1,\n          data: `${item}@2x`\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.$bus.$emit('scroll-bottom')\n      this.tim.sendMessage(message).catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n    },\n    reEditMessage(payload) {\n      this.messageContent = payload\n    },\n    handleUp() {\n      const index = this.memberList.findIndex(\n        member => member.userID === this.atUserID\n      )\n      if (index - 1 < 0) {\n        return\n      }\n      this.atUserID = this.memberList[index - 1].userID\n    },\n    handleDown() {\n      const index = this.memberList.findIndex(\n        member => member.userID === this.atUserID\n      )\n      if (index + 1 >= this.memberList.length) {\n        return\n      }\n      this.atUserID = this.memberList[index + 1].userID\n    },\n    handleEnter() {\n      this.sendTextMessage()\n    },\n    inputChange(value) {\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && value.data === '@') {\n        this.groupAt = true\n        this.listTpye = 'groupAt'\n        this.showCallingMember = true\n      }\n      if (value.data === ' ' && this.messageContent.indexOf('@ ') !== -1) {\n        this.groupAt = false\n        this.listTpye = ''\n        this.showCallingMember = false\n      }\n    },\n    handleLine() {\n      this.messageContent += '\\n'\n    },\n    handlePaste(e) {\n      let clipboardData = e.clipboardData\n      let file\n      if (\n        clipboardData &&\n        clipboardData.files &&\n        clipboardData.files.length > 0\n      ) {\n        file = clipboardData.files[0]\n      }\n\n      if (typeof file === 'undefined') {\n        return\n      }\n      // 1. 创建消息实例，接口返回的实例可以上屏\n      let message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: file\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n\n      // 2. 发送消息\n      let promise = this.tim.sendMessage(message)\n      promise.catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n    },\n    dropHandler(e) {\n      e.preventDefault()\n      let file = e.dataTransfer.files[0]\n      let message = {}\n      if (file.type === 'video/mp4') {\n        message = this.tim.createVideoMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: percent => {\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n          }\n        })\n      } else {\n        message = this.tim.createFileMessage({\n          to: this.toAccount,\n          conversationType: this.currentConversationType,\n          payload: {\n            file: file\n          },\n          onProgress: percent => {\n            this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n          }\n        })\n      }\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.videoPicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    },\n    sendTextMessage() {\n      if (\n        this.messageContent === '' ||\n        this.messageContent.trim().length === 0\n      ) {\n        this.messageContent = ''\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息哦！',\n          type: 'info'\n        })\n        return\n      }\n      if (this.currentConversationType === this.TIM.TYPES.CONV_GROUP && this.groupAt) {\n        let message = this.tim.createTextAtMessage({\n          to: this.toAccount,\n          conversationType: this.TIM.TYPES.CONV_GROUP,\n          payload: {\n            text: this.messageContent,\n            atUserList: this.callingList // 'denny' 'lucy' 都是 userID，而非昵称\n          }\n        })\n        this.$store.commit('pushCurrentMessageList', message)\n        this.$bus.$emit('scroll-bottom')\n        this.tim.sendMessage(message).catch(error => {\n          this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          })\n        })\n        this.messageContent = ''\n        this.groupAt = false\n        return\n      }\n      const message = this.tim.createTextMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: { text: this.messageContent }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.$bus.$emit('scroll-bottom')\n      this.tim.sendMessage(message).catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n      this.messageContent = ''\n    },\n    sendCustomMessage() {\n      if (\n        this.form.data.length === 0 &&\n        this.form.description.length === 0 &&\n        this.form.extension.length === 0\n      ) {\n        this.$store.commit('showMessage', {\n          message: '不能发送空消息',\n          type: 'info'\n        })\n        return\n      }\n      const message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: this.form.data,\n          description: this.form.description,\n          extension: this.form.extension\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim.sendMessage(message).catch(error => {\n        this.$store.commit('showMessage', {\n          type: 'error',\n          message: error.message\n        })\n      })\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      })\n      this.sendCustomDialogVisible = false\n    },\n    random(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min)\n    },\n    sendSurvey() {\n      const message = this.tim.createCustomMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          data: 'survey',\n          description: String(this.rate),\n          extension: this.suggestion\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      Object.assign(this.form, {\n        data: '',\n        description: '',\n        extension: ''\n      })\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          Object.assign(this, {\n            rate: 5,\n            suggestion: ''\n          })\n        })\n        .catch(error => {\n          this.$store.commit('showMessage', {\n            type: 'error',\n            message: error.message\n          })\n        })\n      this.surveyDialogVisible = false\n    },\n    chooseEmoji(item) {\n      this.messageContent += item\n    },\n    handleSendImageClick() {\n      this.$refs.imagePicker.click()\n    },\n    handleSendFileClick() {\n      this.$refs.filePicker.click()\n    },\n    handleSendVideoClick() {\n      this.$refs.videoPicker.click()\n    },\n    groupLive() {\n      this.$store.commit('updateGroupLiveInfo', {\n        groupID: this.toAccount,\n        anchorID: this.userID,\n      })\n      this.$bus.$emit('open-group-live', { channel: 1 })\n    },\n    sendImage() {\n      const message = this.tim.createImageMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('imagePicker') // 或者用event.target\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.imagePicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    },\n    sendFile() {\n      const message = this.tim.createFileMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('filePicker') // 或者用event.target\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.filePicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    },\n    sendVideo() {\n      const message = this.tim.createVideoMessage({\n        to: this.toAccount,\n        conversationType: this.currentConversationType,\n        payload: {\n          file: document.getElementById('videoPicker') // 或者用event.target\n        },\n        onProgress: percent => {\n          this.$set(message, 'progress', percent) // 手动给message 实例加个响应式属性: progress\n        }\n      })\n      this.$store.commit('pushCurrentMessageList', message)\n      this.tim\n        .sendMessage(message)\n        .then(() => {\n          this.$refs.videoPicker.value = null\n        })\n        .catch(imError => {\n          this.$store.commit('showMessage', {\n            message: imError.message,\n            type: 'error'\n          })\n        })\n    }\n  }\n}\n</script>\n<style lang=\"stylus\" scoped>\n#message-send-box-wrapper {\n  box-sizing: border-box;\n  overflow: hidden;\n  padding: 3px 20px 20px 20px;\n}\n\n.emojis {\n  height: 160px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  overflow-y: scroll;\n}\n\n.emoji {\n  height: 40px;\n  width: 40px;\n  box-sizing: border-box;\n}\n\n.send-header-bar {\n  box-sizing: border-box;\n  padding: 3px 0 0 0;\n}\n\n.send-header-bar i {\n  cursor: pointer;\n  font-size: 24px;\n  color: gray;\n  margin: 0 12px 0 0;\n}\n\n.send-header-bar i:hover {\n  color: $black;\n}\n\ntextarea {\n  resize: none;\n}\n\n.text-input {\n  font-size: 16px;\n  width: 100%;\n  box-sizing: box-sizing;\n  border: none;\n  outline: none;\n  background-color: transparent;\n}\n\n.block {\n  padding: 10px 0;\n  display: flex;\n  align-items: center;\n}\n\n.bottom {\n  padding-top: 10px;\n  position: relative;\n\n  .btn-send {\n    cursor: pointer;\n    position: absolute;\n    color: $primary;\n    font-size: 30px;\n    right: 0;\n    bottom: -5px;\n    padding: 6px 6px 4px 4px;\n    border-radius: 50%;\n  }\n}\n.group-live-icon-box {\n    display inline-block\n    position relative\n    top 3px\n    width 25px\n    height 25px\n    margin-right 12px\n    .group-live-icon {\n      display inline-block\n      position absolute\n      top 0\n      left 0\n      width 25px\n      height 25px\n      background url('../../assets/image/live-icon.png') center no-repeat\n      background-size cover\n      z-index 2\n    }\n    .group-live-icon-hover {\n      display inline-block\n      position absolute\n      top 0\n      left 0\n      width 25px\n      height 25px\n      background url('../../assets/image/live-icon-hover.png') center no-repeat\n      background-size cover\n      z-index 1\n    }\n}\n.group-live-icon-box:hover {\n  .group-live-icon {\n    z-index 1\n  }\n  .group-live-icon-hover{\n    z-index 2\n  }\n}\n.calling-member-list {\n  position absolute\n  top 50px\n  background #fff\n  margin-right 20px\n  .calling-list-btn {\n    width 140px\n    display flex\n    float right\n    margin 10px 0\n    .calling-btn {\n      cursor pointer\n      padding 6px 12px\n      background #00A4FF\n      color #ffffff\n      font-size 14px\n      border-radius 20px\n      margin-left 13px\n    }\n  }\n}\n.el-popover {\n  padding: 12px 0 0 0 !important;\n}\n</style>\n"]}]}