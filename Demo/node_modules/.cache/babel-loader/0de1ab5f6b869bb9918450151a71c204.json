{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/conversation/conversation-selected-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/conversation/conversation-selected-list.vue","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nexport default {\n  props: ['type'],\n  data: function data() {\n    return {\n      conversationSelected: [],\n      addGroupMemberVisible: false,\n      currentMemberID: '',\n      count: 30 // 显示的群成员数量\n\n    };\n  },\n  components: {},\n  computed: _objectSpread(_objectSpread({}, mapState({\n    userID: function userID(state) {\n      return state.user.userID;\n    },\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    conversationList: function conversationList(state) {\n      return state.conversation.conversationList;\n    }\n  })), {}, {\n    showLoadMore: function showLoadMore() {\n      return this.members.length < this.currentConversation.groupProfile.memberCount;\n    },\n    avatar: function avatar() {\n      return function (conversation) {\n        switch (conversation.type) {\n          case 'GROUP':\n            return conversation.groupProfile.avatar;\n\n          case 'C2C':\n            return conversation.userProfile.avatar;\n\n          default:\n            return '';\n        }\n      };\n    },\n    members: function members() {\n      return this.currentMemberList.slice(0, this.count);\n    }\n  }),\n  methods: {\n    handleCheckedConversationChange: function handleCheckedConversationChange() {\n      this.$emit('getList', this.conversationSelected);\n    },\n    loadMore: function loadMore() {\n      var _this = this;\n\n      this.$store.dispatch('getGroupMemberList', this.groupProfile.groupID).then(function () {\n        _this.count += 30;\n      });\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACAA,iBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,8BADA;AAEAC,kCAFA;AAGAC,yBAHA;AAIAC,eAJA,CAIA;;AAJA;AAMA,GATA;AAUAC,gBAVA;AAYAC,4CACAC;AACAC;AAAA;AAAA,KADA;AAEAC;AAAA;AAAA,KAFA;AAGAC;AAAA;AAAA;AAHA,IADA;AAMAC,gBANA,0BAMA;AACA;AACA,KARA;AASAC,UATA,oBASA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AANA;AAQA,OATA;AAWA,KArBA;AAsBAC,WAtBA,qBAsBA;AACA;AACA;AAxBA,IAZA;AAsCAC;AACAC,mCADA,6CACA;AACA;AACA,KAHA;AAIAC,YAJA,sBAIA;AAAA;;AACA,kBACAC,QADA,CACA,oBADA,EACA,yBADA,EAEAC,IAFA,CAEA;AACA;AACA,OAJA;AAKA;AAVA;AAtCA","names":["props","data","conversationSelected","addGroupMemberVisible","currentMemberID","count","components","computed","mapState","userID","currentConversation","conversationList","showLoadMore","avatar","members","methods","handleCheckedConversationChange","loadMore","dispatch","then"],"sourceRoot":"src/components/conversation","sources":["conversation-selected-list.vue"],"sourcesContent":["<template>\n    <div class=\"group-member-list-wrapper\">\n        <div class=\"header\">\n            <span class=\"member-count text-ellipsis\">会话列表</span>\n        </div>\n        <div class=\"scroll-content\">\n            <div class=\"group-member-list\">\n                <el-checkbox-group v-model=\"conversationSelected\" @change=\"handleCheckedConversationChange\">\n                    <el-checkbox v-for=\"conversation in conversationList\"  :label=\"conversation.conversationID\" :key=\"conversation.conversationID\">\n<!--                        <conversation-item :conversation=\"item\"/>-->\n                        <div class=\"conversation-item-container\">\n                            <div class=\"warp\">\n                                <avatar :src=\"avatar(conversation)\" :type=\"conversation.type\" />\n                                <div class=\"content\">\n                                    <div class=\"row-1\">\n                                        <div class=\"name\">\n                                            <div class=\"text-ellipsis\">\n                <span :title=\"conversation.userProfile.nick || conversation.userProfile.userID\"\n                      v-if=\"conversation.type ===  TIM.TYPES.CONV_C2C\"\n                >{{conversation.userProfile.nick || conversation.userProfile.userID}}\n                </span>\n                                                <span :title=\"conversation.groupProfile.name || conversation.groupProfile.groupID\"\n                                                      v-else-if=\"conversation.type ===  TIM.TYPES.CONV_GROUP\"\n                                                >{{conversation.groupProfile.name || conversation.groupProfile.groupID}}\n                </span>\n                                                <span\n                                                        v-else-if=\"conversation.type === TIM.TYPES.CONV_SYSTEM\"\n                                                >系统通知\n                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n<!--                        <el-divider></el-divider>-->\n                    </el-checkbox>\n                </el-checkbox-group>\n            </div>\n        </div>\n        <div class=\"more\">\n<!--            <el-button v-if=\"showLoadMore\" type=\"text\" @click=\"loadMore\">查看更多</el-button>-->\n        </div>\n    </div>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  export default {\n    props:['type'],\n    data() {\n      return {\n        conversationSelected:[],\n        addGroupMemberVisible: false,\n        currentMemberID: '',\n        count: 30 // 显示的群成员数量\n      }\n    },\n    components: {\n    },\n    computed: {\n      ...mapState({\n        userID: state => state.user.userID,\n        currentConversation: state => state.conversation.currentConversation,\n        conversationList: state => state.conversation.conversationList,\n      }),\n      showLoadMore() {\n        return this.members.length < this.currentConversation.groupProfile.memberCount\n      },\n      avatar() {\n        return function (conversation) {\n          switch (conversation.type) {\n            case 'GROUP':\n              return conversation.groupProfile.avatar\n            case 'C2C':\n              return conversation.userProfile.avatar\n            default:\n              return ''\n          }\n        }\n\n      },\n      members() {\n        return this.currentMemberList.slice(0, this.count)\n      }\n    },\n    methods: {\n      handleCheckedConversationChange() {\n        this.$emit('getList',this.conversationSelected)\n      },\n      loadMore() {\n        this.$store\n          .dispatch('getGroupMemberList', this.groupProfile.groupID)\n          .then(() => {\n            this.count += 30\n          })\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\" scoped>\n    .group-member-list-wrapper\n        .header\n            height 50px\n            padding 10px 16px 10px 20px\n            border-bottom 1px solid $border-base\n            .member-count\n                display inline-block\n                max-width 130px\n                line-height 30px\n                font-size 14px\n                vertical-align bottom\n            .btn-add-member\n                width 30px\n                height 30px\n                font-size 28px\n                text-align center\n                line-height 32px\n                cursor pointer\n                float right\n                &:hover\n                    color $light-primary\n        .scroll-content\n            max-height: 250px;\n            overflow-y: scroll;\n            padding 10px 15px 10px 15px\n            width 100%\n\n\n\n    .conversation-item-container\n        padding 5px 20px\n        cursor pointer\n        position relative\n        overflow hidden\n        transition .2s\n        .warp\n            display flex\n        .avatar\n            width 40px\n            height 40px\n            margin-right 10px\n            border-radius 50%\n            flex-shrink 0\n        .content\n            flex 1\n            height 40px\n            overflow hidden\n            font-size 13px\n            .row-1\n                display flex\n                line-height 21px\n                .name\n                    color #000\n                    flex 1\n                    min-width 0px\n                    line-height 40px\n\n /deep/ .el-checkbox{\n     display block\n }\n/deep/ .el-checkbox__label{\n    width 100%\n}\n/deep/ .el-divider--horizontal{\n   margin 0\n}\n.group-member-list /deep/ .el-checkbox__input {\n    position absolute\n    top -12px\n    left 3px\n    bottom 0\n    margin auto\n    cursor pointer\n    line-height 1\n    display flex\n    justify-content center\n    align-items center\n}\n</style>\n"]}]}