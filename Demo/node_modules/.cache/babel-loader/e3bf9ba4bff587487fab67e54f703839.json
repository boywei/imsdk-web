{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/message/message-header.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/components/message/message-header.vue","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport { getFullDate } from \"../../utils/date\";\nexport default {\n  name: 'MessageHeader',\n  props: {\n    message: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    },\n    currentMemberList: function currentMemberList(state) {\n      return state.group.currentMemberList;\n    }\n  })), {}, {\n    date: function date() {\n      return getFullDate(new Date(this.message.time * 1000));\n    },\n    from: function from() {\n      var isC2C = this.currentConversation.type === this.TIM.TYPES.CONV_C2C; // 自己发送的用昵称渲染\n\n      if (this.isMine) {\n        return this.message.nameCard || this.currentUserProfile.nick || this.currentUserProfile.userID;\n      } // 1. C2C 的消息体中还无 nick / avatar 字段，需从 conversation.userProfile 中获取\n\n\n      if (isC2C) {\n        return this.currentConversation.userProfile.nick || this.currentConversation.userProfile.userID;\n      } else if (this.currentConversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return this.message.type === this.TIM.TYPES.MSG_GRP_SYS_NOTICE ? '群系统通知' : '系统通知';\n      } // 2. 群组消息，用消息体中的 nick 渲染。nameCard暂时支持不完善\n\n\n      return this.message.nameCard || this.message.nick || this.message.from;\n    },\n    isMine: function isMine() {\n      return this.message.flow === 'out';\n    }\n  })\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;AAQA;AACA;AACA;AACAA,uBADA;AAEAC;AACAC;AACAC,kBADA;AAEAC;AAFA;AADA,GAFA;AAQAC,4CACAC;AACAC;AAAA;AAAA,KADA;AAEAC;AAAA;AAAA,KAFA;AAGAC;AAAA;AAAA;AAHA,IADA;AAMAC,QANA,kBAMA;AACA;AACA,KARA;AASAC,QATA,kBASA;AACA,4EADA,CAEA;;AACA;AACA;AACA,OALA,CAMA;;;AACA;AACA,eACA,6CACA,2CAFA;AAIA,OALA,MAKA;AACA,yEACA,OADA,GAEA,MAFA;AAGA,OAhBA,CAiBA;;;AACA;AACA,KA5BA;AA6BAC,UA7BA,oBA6BA;AACA;AACA;AA/BA;AARA","names":["name","props","message","type","required","computed","mapState","currentConversation","currentUserProfile","currentMemberList","date","from","isMine"],"sourceRoot":"src/components/message","sources":["message-header.vue"],"sourcesContent":["<template>\n  <div class=\"base\" :class=\"[ isMine ? 'right' : 'left']\">\n    <div class=\"name text-ellipsis\">{{ from }}</div>\n    <div class=\"date\">{{ date }}</div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { getFullDate } from '../../utils/date'\nexport default {\n  name: 'MessageHeader',\n  props: {\n    message: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    ...mapState({\n      currentConversation: state => state.conversation.currentConversation,\n      currentUserProfile: state => state.user.currentUserProfile,\n      currentMemberList: state => state.group.currentMemberList\n    }),\n    date() {\n      return getFullDate(new Date(this.message.time * 1000))\n    },\n    from() {\n      const isC2C = this.currentConversation.type === this.TIM.TYPES.CONV_C2C\n      // 自己发送的用昵称渲染\n      if (this.isMine) {\n        return this.message.nameCard || this.currentUserProfile.nick || this.currentUserProfile.userID\n      }\n      // 1. C2C 的消息体中还无 nick / avatar 字段，需从 conversation.userProfile 中获取\n      if (isC2C) {\n        return (\n          this.currentConversation.userProfile.nick ||\n          this.currentConversation.userProfile.userID\n        )\n      } else if (this.currentConversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return this.message.type === this.TIM.TYPES.MSG_GRP_SYS_NOTICE\n          ? '群系统通知'\n          : '系统通知'\n      }\n      // 2. 群组消息，用消息体中的 nick 渲染。nameCard暂时支持不完善\n      return this.message.nameCard ||  this.message.nick || this.message.from\n    },\n    isMine() {\n      return this.message.flow === 'out'\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.right {\n  display: flex;\n  flex-direction: row-reverse;\n}\n\n.left {\n  display: flex;\n  flex-direction: row;\n}\n\n.base {\n  color: $secondary;\n  font-size: 12px;\n}\n\n.name {\n  padding: 0 4px;\n  max-width: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n</style>\n"]}]}