{"remainingRequest":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/eslint-loader/index.js??ref--13-0!/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/store/modules/conversation.js","dependencies":[{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/store/modules/conversation.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/babel.config.js","mtime":1648707124000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport tim from 'tim';\nimport TIM from 'tim-js-sdk/tim-js-friendship';\nimport store from '..';\nimport { titleNotify } from \"../../utils\";\nimport { filterCallingMessage } from \"../../utils/common\";\nvar conversationModules = {\n  state: {\n    currentConversation: {},\n    currentMessageList: [],\n    nextReqMessageID: '',\n    isCompleted: false,\n    // 当前会话消息列表是否已经拉完了所有消息\n    conversationList: [],\n    callingInfo: {\n      memberList: [],\n      type: 'C2C' //C2C，GROUP\n\n    },\n    audioCall: false,\n    isShowConversationList: false,\n    selectedMessageList: [],\n    relayType: 1,\n    // 1: 转发  2: 逐条转发 3: 合并转发\n    mergerMessageList: [],\n    mergerMessage: {},\n    relayMessage: {},\n    selectMessage: false\n  },\n  getters: {\n    toAccount: function toAccount(state) {\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\n        return '';\n      }\n\n      switch (state.currentConversation.type) {\n        case 'C2C':\n          return state.currentConversation.conversationID.replace('C2C', '');\n\n        case 'GROUP':\n          return state.currentConversation.conversationID.replace('GROUP', '');\n\n        default:\n          return state.currentConversation.conversationID;\n      }\n    },\n    currentConversationType: function currentConversationType(state) {\n      if (!state.currentConversation || !state.currentConversation.type) {\n        return '';\n      }\n\n      return state.currentConversation.type;\n    },\n    totalUnreadCount: function totalUnreadCount(state) {\n      var result = state.conversationList.reduce(function (count, conversation) {\n        // 当前会话不计算总未读\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\n          return count;\n        }\n\n        return count + conversation.unreadCount;\n      }, 0);\n      titleNotify(result);\n      return result;\n    },\n    // 用于当前会话的图片预览\n    imgUrlList: function imgUrlList(state) {\n      return state.currentMessageList.filter(function (message) {\n        return message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked;\n      }) // 筛选出没有撤回并且类型是图片类型的消息\n      .map(function (message) {\n        return message.payload.imageInfoArray[0].url;\n      });\n    }\n  },\n  mutations: {\n    /**\n     * 显示trtcCalling 群通话成员列表\n     * @param {Object} state\n     * @param {Conversation} setCallingList\n     */\n    setCallingList: function setCallingList(state, value) {\n      state.callingInfo.memberList = value.memberList;\n      state.callingInfo.type = value.type;\n    },\n\n    /**\n     * 显示trtcCalling 语音通话\n     * @param {Object} state\n     * @param {Conversation} showAudioCall\n     */\n    showConversationList: function showConversationList(state, value) {\n      state.isShowConversationList = value;\n    },\n    setSelectedMessageList: function setSelectedMessageList(state, value) {\n      state.selectedMessageList = value;\n    },\n    setRelayType: function setRelayType(state, value) {\n      state.relayType = value;\n    },\n    setMergerMessage: function setMergerMessage(state, value) {\n      state.mergerMessage = value;\n      state.mergerMessageList = [].concat(_toConsumableArray(state.mergerMessageList), [value]);\n    },\n    setRelayMessage: function setRelayMessage(state, value) {\n      state.relayMessage = value;\n    },\n    updateMergerMessage: function updateMergerMessage(state, value) {\n      state.mergerMessage = value;\n      state.mergerMessageList.pop();\n    },\n    setSelectedMessage: function setSelectedMessage(state, value) {\n      state.selectMessage = value;\n    },\n    resetSelectedMessage: function resetSelectedMessage(state, value) {\n      state.selectMessage = value;\n      Object.assign(state, {\n        selectedMessageList: []\n      });\n    },\n    resetMergerMessage: function resetMergerMessage(state, value) {\n      state.mergerMessagePop = value;\n      Object.assign(state, {\n        mergerMessage: {},\n        mergerMessageList: []\n      });\n    },\n\n    /**\n     * 显示trtcCalling 语音通话\n     * @param {Object} state\n     * @param {Conversation} showAudioCall\n     */\n    showAudioCall: function showAudioCall(state, value) {\n      state.audioCall = value;\n    },\n\n    /**\n     * 更新当前会话\n     * 调用时机: 切换会话时\n     * @param {Object} state\n     * @param {Conversation} conversation\n     */\n    updateCurrentConversation: function updateCurrentConversation(state, conversation) {\n      state.currentConversation = conversation;\n      state.currentMessageList = [];\n      state.nextReqMessageID = '';\n      state.isCompleted = false;\n    },\n\n    /**\n     * 更新会话列表\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\n     * @param {Object} state\n     * @param {Conversation[]} conversationList\n     */\n    updateConversationList: function updateConversationList(state, conversationList) {\n      state.conversationList = conversationList;\n    },\n\n    /**\n     * 重置当前会话\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\n     * @param {Object} state\n     */\n    resetCurrentConversation: function resetCurrentConversation(state) {\n      state.currentConversation = {};\n    },\n\n    /**\n     * 将消息插入当前会话列表\n     * 调用时机：收/发消息事件触发时\n     * @param {Object} state\n     * @param {Message[]|Message} data\n     * @returns\n     */\n    pushCurrentMessageList: function pushCurrentMessageList(state, data) {\n      // 还没当前会话，则跳过\n      if (!state.currentConversation.conversationID) {\n        return;\n      }\n\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        var result = data.filter(function (item) {\n          return item.conversationID === state.currentConversation.conversationID;\n        });\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), _toConsumableArray(result));\n        filterCallingMessage(state.currentMessageList);\n      } else if (data.conversationID === state.currentConversation.conversationID) {\n        state.currentMessageList = [].concat(_toConsumableArray(state.currentMessageList), [data]);\n        filterCallingMessage(state.currentMessageList);\n      }\n    },\n\n    /**\n     * 从当前消息列表中删除某条消息\n     * @param {Object} state\n     * @param {Message} message\n     */\n    removeMessage: function removeMessage(state, message) {\n      var index = state.currentMessageList.findIndex(function (_ref) {\n        var ID = _ref.ID;\n        return ID === message.ID;\n      });\n\n      if (index >= 0) {\n        state.currentMessageList.splice(index, 1);\n      }\n    },\n    reset: function reset(state) {\n      Object.assign(state, {\n        currentConversation: {},\n        currentMessageList: [],\n        nextReqMessageID: '',\n        isCompleted: false,\n        // 当前会话消息列表是否已经拉完了所有消息\n        conversationList: []\n      });\n    }\n  },\n  actions: {\n    /**\n     * 获取消息列表\n     * 调用时机：打开某一会话时或下拉获取历史消息时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    getMessageList: function getMessageList(context, conversationID) {\n      if (context.state.isCompleted) {\n        context.commit('showMessage', {\n          message: '已经没有更多的历史消息了哦',\n          type: 'info'\n        });\n        return;\n      }\n\n      var _context$state = context.state,\n          nextReqMessageID = _context$state.nextReqMessageID,\n          currentMessageList = _context$state.currentMessageList;\n      tim.getMessageList({\n        conversationID: conversationID,\n        nextReqMessageID: nextReqMessageID,\n        count: 15\n      }).then(function (imReponse) {\n        // 更新messageID，续拉时要用到\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID;\n        context.state.isCompleted = imReponse.data.isCompleted; // 更新当前消息列表，从头部插入\n\n        context.state.currentMessageList = [].concat(_toConsumableArray(imReponse.data.messageList), _toConsumableArray(currentMessageList));\n        filterCallingMessage(context.state.currentMessageList);\n      });\n    },\n\n    /**\n     * 切换会话\n     * 调用时机：切换会话时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    checkoutConversation: function checkoutConversation(context, conversationID) {\n      context.commit('resetCurrentMemberList');\n      context.commit('resetSelectedMessage', false);\n      context.commit('resetFriendContent'); // 1.切换会话前，将切换前的会话进行已读上报\n\n      if (context.state.currentConversation.conversationID) {\n        var prevConversationID = context.state.currentConversation.conversationID;\n        tim.setMessageRead({\n          conversationID: prevConversationID\n        });\n      } // 2.待切换的会话也进行已读上报\n\n\n      tim.setMessageRead({\n        conversationID: conversationID\n      }); // 3. 获取会话信息\n\n      return tim.getConversationProfile(conversationID).then(function (_ref2) {\n        var data = _ref2.data;\n        // 3.1 更新当前会话\n        context.commit('updateCurrentConversation', data.conversation); // 3.2 获取消息列表\n\n        context.dispatch('getMessageList', conversationID); // 3.3 拉取第一页群成员列表\n\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID);\n        }\n\n        return Promise.resolve();\n      });\n    }\n  }\n};\nexport default conversationModules;",{"version":3,"sources":["/Users/wei/IdeaProjects/boywei/imsdk-web/Demo/src/store/modules/conversation.js"],"names":["tim","TIM","store","titleNotify","filterCallingMessage","conversationModules","state","currentConversation","currentMessageList","nextReqMessageID","isCompleted","conversationList","callingInfo","memberList","type","audioCall","isShowConversationList","selectedMessageList","relayType","mergerMessageList","mergerMessage","relayMessage","selectMessage","getters","toAccount","conversationID","replace","currentConversationType","totalUnreadCount","result","reduce","count","conversation","hidden","unreadCount","imgUrlList","filter","message","TYPES","MSG_IMAGE","isRevoked","map","payload","imageInfoArray","url","mutations","setCallingList","value","showConversationList","setSelectedMessageList","setRelayType","setMergerMessage","setRelayMessage","updateMergerMessage","pop","setSelectedMessage","resetSelectedMessage","Object","assign","resetMergerMessage","mergerMessagePop","showAudioCall","updateCurrentConversation","updateConversationList","resetCurrentConversation","pushCurrentMessageList","data","Array","isArray","item","removeMessage","index","findIndex","ID","splice","reset","actions","getMessageList","context","commit","then","imReponse","messageList","checkoutConversation","prevConversationID","setMessageRead","getConversationProfile","dispatch","CONV_GROUP","groupProfile","groupID","Promise","resolve"],"mappings":"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","sourcesContent":["import tim from 'tim'\nimport TIM from 'tim-js-sdk/tim-js-friendship'\nimport store from '..'\nimport { titleNotify } from '../../utils'\nimport { filterCallingMessage } from '../../utils/common'\nconst conversationModules = {\n  state: {\n    currentConversation: {},\n    currentMessageList: [],\n    nextReqMessageID: '',\n    isCompleted: false, // 当前会话消息列表是否已经拉完了所有消息\n    conversationList: [],\n    callingInfo: {\n      memberList: [],\n      type: 'C2C',   //C2C，GROUP\n    },\n    audioCall: false,\n    isShowConversationList: false,\n    selectedMessageList:[],\n    relayType: 1,   // 1: 转发  2: 逐条转发 3: 合并转发\n    mergerMessageList: [],\n    mergerMessage: {},\n    relayMessage: {},\n    selectMessage: false,\n  },\n  getters: {\n    toAccount: state => {\n      if (!state.currentConversation || !state.currentConversation.conversationID) {\n        return ''\n      }\n      switch (state.currentConversation.type) {\n        case 'C2C':\n          return state.currentConversation.conversationID.replace('C2C', '')\n        case 'GROUP':\n          return state.currentConversation.conversationID.replace('GROUP', '')\n        default:\n          return state.currentConversation.conversationID\n      }\n    },\n    currentConversationType: state => {\n      if (!state.currentConversation || !state.currentConversation.type) {\n        return ''\n      }\n      return state.currentConversation.type\n    },\n    totalUnreadCount: state => {\n      const result = state.conversationList.reduce((count, conversation) => {\n        // 当前会话不计算总未读\n        if (!store.getters.hidden && state.currentConversation.conversationID === conversation.conversationID) {\n          return count\n        }\n        return count + conversation.unreadCount\n      }, 0)\n      titleNotify(result)\n      return result\n    },\n    // 用于当前会话的图片预览\n    imgUrlList: state => {\n      return state.currentMessageList\n        .filter(message => message.type === TIM.TYPES.MSG_IMAGE && !message.isRevoked) // 筛选出没有撤回并且类型是图片类型的消息\n        .map(message => message.payload.imageInfoArray[0].url)\n    }\n  },\n  mutations: {\n    /**\n     * 显示trtcCalling 群通话成员列表\n     * @param {Object} state\n     * @param {Conversation} setCallingList\n     */\n    setCallingList(state, value) {\n      state.callingInfo.memberList = value.memberList\n      state.callingInfo.type = value.type\n    },\n\n    /**\n     * 显示trtcCalling 语音通话\n     * @param {Object} state\n     * @param {Conversation} showAudioCall\n     */\n\n    showConversationList(state, value) {\n      state.isShowConversationList = value\n    },\n    setSelectedMessageList(state, value) {\n      state.selectedMessageList = value\n    },\n    setRelayType(state, value) {\n      state.relayType = value\n    },\n    setMergerMessage(state, value) {\n      state.mergerMessage = value\n      state.mergerMessageList = [...state.mergerMessageList, value]\n    },\n    setRelayMessage(state, value) {\n      state.relayMessage = value\n    },\n    updateMergerMessage(state, value) {\n      state.mergerMessage = value\n      state.mergerMessageList.pop()\n\n    },\n    setSelectedMessage(state, value) {\n      state.selectMessage = value\n    },\n    resetSelectedMessage(state, value) {\n      state.selectMessage = value\n      Object.assign(state, {\n        selectedMessageList: [],\n      })\n    },\n    resetMergerMessage(state, value) {\n      state.mergerMessagePop = value\n      Object.assign(state, {\n        mergerMessage: {},\n        mergerMessageList: [],\n      })\n    },\n    /**\n     * 显示trtcCalling 语音通话\n     * @param {Object} state\n     * @param {Conversation} showAudioCall\n     */\n\n    showAudioCall(state, value) {\n      state.audioCall = value\n    },\n\n    /**\n     * 更新当前会话\n     * 调用时机: 切换会话时\n     * @param {Object} state\n     * @param {Conversation} conversation\n     */\n    updateCurrentConversation(state, conversation) {\n      state.currentConversation = conversation\n      state.currentMessageList = []\n      state.nextReqMessageID = ''\n      state.isCompleted = false\n    },\n    /**\n     * 更新会话列表\n     * 调用时机：触发会话列表更新事件时。CONVERSATION_LIST_UPDATED\n     * @param {Object} state\n     * @param {Conversation[]} conversationList\n     */\n    updateConversationList(state, conversationList) {\n      state.conversationList = conversationList\n    },\n    /**\n     * 重置当前会话\n     * 调用时机：需要重置当前会话时，例如：当前会话是一个群组，正好被踢出群时（被踢群事件触发），重置当前会话\n     * @param {Object} state\n     */\n    resetCurrentConversation(state) {\n      state.currentConversation = {}\n    },\n    /**\n     * 将消息插入当前会话列表\n     * 调用时机：收/发消息事件触发时\n     * @param {Object} state\n     * @param {Message[]|Message} data\n     * @returns\n     */\n    pushCurrentMessageList(state, data) {\n      // 还没当前会话，则跳过\n      if (!state.currentConversation.conversationID) {\n        return\n      }\n      if (Array.isArray(data)) {\n        // 筛选出当前会话的消息\n        const result = data.filter(item => item.conversationID === state.currentConversation.conversationID)\n        state.currentMessageList = [...state.currentMessageList, ...result]\n        filterCallingMessage(state.currentMessageList)\n      } else if (data.conversationID === state.currentConversation.conversationID) {\n        state.currentMessageList = [...state.currentMessageList, data]\n        filterCallingMessage(state.currentMessageList)\n      }\n    },\n    /**\n     * 从当前消息列表中删除某条消息\n     * @param {Object} state\n     * @param {Message} message\n     */\n    removeMessage(state, message) {\n      const index = state.currentMessageList.findIndex(({ ID }) => ID === message.ID)\n      if (index >= 0) {\n        state.currentMessageList.splice(index, 1)\n      }\n    },\n    reset(state) {\n      Object.assign(state, {\n        currentConversation: {},\n        currentMessageList: [],\n        nextReqMessageID: '',\n        isCompleted: false, // 当前会话消息列表是否已经拉完了所有消息\n        conversationList: []\n      })\n    }\n  },\n  actions: {\n    /**\n     * 获取消息列表\n     * 调用时机：打开某一会话时或下拉获取历史消息时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    getMessageList(context, conversationID) {\n      if (context.state.isCompleted) {\n        context.commit('showMessage', {\n          message: '已经没有更多的历史消息了哦',\n          type: 'info'\n        })\n        return\n      }\n      const { nextReqMessageID, currentMessageList } = context.state\n      tim.getMessageList({ conversationID, nextReqMessageID, count: 15 }).then(imReponse => {\n        // 更新messageID，续拉时要用到\n        context.state.nextReqMessageID = imReponse.data.nextReqMessageID\n        context.state.isCompleted = imReponse.data.isCompleted\n        // 更新当前消息列表，从头部插入\n        context.state.currentMessageList = [...imReponse.data.messageList, ...currentMessageList]\n        filterCallingMessage(context.state.currentMessageList)\n\n      })\n    },\n    /**\n     * 切换会话\n     * 调用时机：切换会话时\n     * @param {Object} context\n     * @param {String} conversationID\n     */\n    checkoutConversation(context, conversationID) {\n      context.commit('resetCurrentMemberList')\n      context.commit('resetSelectedMessage', false)\n      context.commit('resetFriendContent')\n      // 1.切换会话前，将切换前的会话进行已读上报\n      if (context.state.currentConversation.conversationID) {\n        const prevConversationID = context.state.currentConversation.conversationID\n        tim.setMessageRead({ conversationID: prevConversationID })\n      }\n      // 2.待切换的会话也进行已读上报\n      tim.setMessageRead({ conversationID })\n      // 3. 获取会话信息\n      return tim.getConversationProfile(conversationID).then(({ data }) => {\n        // 3.1 更新当前会话\n        context.commit('updateCurrentConversation', data.conversation)\n        // 3.2 获取消息列表\n        context.dispatch('getMessageList', conversationID)\n        // 3.3 拉取第一页群成员列表\n        if (data.conversation.type === TIM.TYPES.CONV_GROUP) {\n          return context.dispatch('getGroupMemberList', data.conversation.groupProfile.groupID)\n        }\n        return Promise.resolve()\n      })\n    }\n  }\n}\n\nexport default conversationModules\n"]}]}